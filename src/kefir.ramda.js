// THIS FILE IS GENERATED

import * as R from 'ramda'
import * as K from 'karet.lift'

export const F = K.lift(R.F)
export const T = K.lift(R.T)
export {__} from 'ramda'
export const add = K.lift(R.add)
export const addIndex = K.liftRec(R.addIndex)
export const adjust = K.lift(R.adjust)
export const all = K.lift(R.all)
export const allPass = K.liftRec(R.allPass)
export const always = K.liftRec(R.always)
export const and = K.lift(R.and)
export const andThen = K.lift(R.andThen)
export const any = K.lift(R.any)
export const anyPass = K.liftRec(R.anyPass)
export const ap = K.lift(R.ap)
export const aperture = K.lift(R.aperture)
export const append = K.lift(R.append)
export const apply = K.lift(R.apply)
export const applySpec = K.liftRec(R.applySpec)
export const applyTo = K.lift(R.applyTo)
export const ascend = K.lift(R.ascend)
export const assoc = K.lift(R.assoc)
export const assocPath = K.lift(R.assocPath)
export const binary = K.liftRec(R.binary)
export const bind = K.liftRec(R.bind)
export const both = K.liftRec(R.both)
export const call = K.liftRec(R.call)
export const chain = K.liftRec(R.chain)
export const clamp = K.lift(R.clamp)
export const clone = K.lift(R.clone)
export const comparator = K.liftRec(R.comparator)
export const complement = K.liftRec(R.complement)
export const compose = K.liftRec(R.compose)
export const composeK = K.liftRec(
  process.env.NODE_ENV === 'production'
    ? R.composeK
    : function composeK() {
        if (!composeK.warned) {
          composeK.warned = 1
          console.warn("Warning: `composeK` has been deprecated in favor of `composeWith(chain)`.")
        }
        return R.composeK.apply(this, arguments)
      }
)
export const composeP = K.liftRec(
  process.env.NODE_ENV === 'production'
    ? R.composeP
    : function composeP() {
        if (!composeP.warned) {
          composeP.warned = 1
          console.warn("Warning: `composeP` has been deprecated in favor of `composeWith(then)`.")
        }
        return R.composeP.apply(this, arguments)
      }
)
export const composeWith = K.liftRec(R.composeWith)
export const concat = K.lift(R.concat)
export const cond = K.liftRec(R.cond)
export const construct = K.liftRec(R.construct)
export const constructN = K.liftRec(R.constructN)
export const contains = K.lift(
  process.env.NODE_ENV === 'production'
    ? R.contains
    : function contains(_0, _1) {
        if (!contains.warned) {
          contains.warned = 1
          console.warn("Warning: `contains` has been renamed to `includes`.")
        }
        return R.contains.apply(this, arguments)
      }
)
export const converge = K.liftRec(R.converge)
export const countBy = K.lift(R.countBy)
export const curry = K.liftRec(R.curry)
export const curryN = K.liftRec(R.curryN)
export const dec = K.lift(R.dec)
export const defaultTo = K.lift(R.defaultTo)
export const descend = K.lift(R.descend)
export const difference = K.lift(R.difference)
export const differenceWith = K.lift(R.differenceWith)
export const dissoc = K.lift(R.dissoc)
export const dissocPath = K.lift(R.dissocPath)
export const divide = K.lift(R.divide)
export const drop = K.lift(R.drop)
export const dropLast = K.lift(R.dropLast)
export const dropLastWhile = K.lift(R.dropLastWhile)
export const dropRepeats = K.lift(R.dropRepeats)
export const dropRepeatsWith = K.lift(R.dropRepeatsWith)
export const dropWhile = K.lift(R.dropWhile)
export const either = K.liftRec(R.either)
export const empty = K.lift(R.empty)
export const endsWith = K.lift(R.endsWith)
export const eqBy = K.lift(R.eqBy)
export const eqProps = K.lift(R.eqProps)
export const equals = K.lift(R.equals)
export const evolve = K.lift(R.evolve)
export const filter = K.lift(R.filter)
export const find = K.lift(R.find)
export const findIndex = K.lift(R.findIndex)
export const findLast = K.lift(R.findLast)
export const findLastIndex = K.lift(R.findLastIndex)
export const flatten = K.lift(R.flatten)
export const flip = K.liftRec(R.flip)
export const forEach = K.lift(R.forEach)
export const forEachObjIndexed = K.lift(R.forEachObjIndexed)
export const fromPairs = K.lift(R.fromPairs)
export const groupBy = K.lift(R.groupBy)
export const groupWith = K.lift(R.groupWith)
export const gt = K.lift(R.gt)
export const gte = K.lift(R.gte)
export const has = K.lift(R.has)
export const hasIn = K.lift(R.hasIn)
export const hasPath = K.lift(R.hasPath)
export const head = K.lift(R.head)
export const identical = K.lift(R.identical)
export const identity = K.lift(R.identity)
export const ifElse = K.liftRec(R.ifElse)
export const inc = K.lift(R.inc)
export const includes = K.lift(R.includes)
export const indexBy = K.lift(R.indexBy)
export const indexOf = K.lift(R.indexOf)
export const init = K.lift(R.init)
export const innerJoin = K.lift(R.innerJoin)
export const insert = K.lift(R.insert)
export const insertAll = K.lift(R.insertAll)
export const intersection = K.lift(R.intersection)
export const intersperse = K.lift(R.intersperse)
export const into = K.lift(R.into)
export const invert = K.lift(R.invert)
export const invertObj = K.lift(R.invertObj)
export const invoker = K.liftRec(R.invoker)
export const is = K.lift(R.is)
export const isEmpty = K.lift(R.isEmpty)
export const isNil = K.lift(R.isNil)
export const join = K.lift(R.join)
export const juxt = K.liftRec(R.juxt)
export const keys = K.lift(R.keys)
export const keysIn = K.lift(R.keysIn)
export const last = K.lift(R.last)
export const lastIndexOf = K.lift(R.lastIndexOf)
export const length = K.lift(R.length)
export const lens = K.lift(R.lens)
export const lensIndex = K.lift(R.lensIndex)
export const lensPath = K.lift(R.lensPath)
export const lensProp = K.lift(R.lensProp)
export const lift = K.liftRec(R.lift)
export const liftN = K.liftRec(R.liftN)
export const lt = K.lift(R.lt)
export const lte = K.lift(R.lte)
export const map = K.lift(R.map)
export const mapAccum = K.lift(R.mapAccum)
export const mapAccumRight = K.lift(R.mapAccumRight)
export const mapObjIndexed = K.lift(R.mapObjIndexed)
export const match = K.lift(R.match)
export const mathMod = K.lift(R.mathMod)
export const max = K.lift(R.max)
export const maxBy = K.lift(R.maxBy)
export const mean = K.lift(R.mean)
export const median = K.lift(R.median)
export const memoizeWith = K.liftRec(R.memoizeWith)
export const merge = K.lift(
  process.env.NODE_ENV === 'production'
    ? R.merge
    : function merge(_0, _1) {
        if (!merge.warned) {
          merge.warned = 1
          console.warn("Warning: `merge` has been deprecated in favor of new `mergeRight`.")
        }
        return R.merge.apply(this, arguments)
      }
)
export const mergeAll = K.lift(R.mergeAll)
export const mergeDeepLeft = K.lift(R.mergeDeepLeft)
export const mergeDeepRight = K.lift(R.mergeDeepRight)
export const mergeDeepWith = K.lift(R.mergeDeepWith)
export const mergeDeepWithKey = K.lift(R.mergeDeepWithKey)
export const mergeLeft = K.lift(R.mergeLeft)
export const mergeRight = K.lift(R.mergeRight)
export const mergeWith = K.lift(R.mergeWith)
export const mergeWithKey = K.lift(R.mergeWithKey)
export const min = K.lift(R.min)
export const minBy = K.lift(R.minBy)
export const modulo = K.lift(R.modulo)
export const move = K.lift(R.move)
export const multiply = K.lift(R.multiply)
export const nAry = K.liftRec(R.nAry)
export const negate = K.lift(R.negate)
export const none = K.lift(R.none)
export const not = K.lift(R.not)
export const nth = K.lift(R.nth)
export const nthArg = K.liftRec(R.nthArg)
export const o = K.liftRec(R.o)
export const objOf = K.lift(R.objOf)
export const of = K.lift(R.of)
export const omit = K.lift(R.omit)
export const once = K.liftRec(R.once)
export const or = K.lift(R.or)
export const otherwise = K.lift(R.otherwise)
export const over = K.lift(R.over)
export const pair = K.lift(R.pair)
export const partial = K.liftRec(R.partial)
export const partialRight = K.liftRec(R.partialRight)
export const partition = K.lift(R.partition)
export const path = K.lift(R.path)
export const pathEq = K.lift(R.pathEq)
export const pathOr = K.lift(R.pathOr)
export const pathSatisfies = K.lift(R.pathSatisfies)
export const paths = K.lift(R.paths)
export const pick = K.lift(R.pick)
export const pickAll = K.lift(R.pickAll)
export const pickBy = K.lift(R.pickBy)
export const pipe = K.liftRec(R.pipe)
export const pipeK = K.liftRec(
  process.env.NODE_ENV === 'production'
    ? R.pipeK
    : function pipeK() {
        if (!pipeK.warned) {
          pipeK.warned = 1
          console.warn("Warning: `pipeK` has been deprecated in favor of `pipeWith(chain)`.")
        }
        return R.pipeK.apply(this, arguments)
      }
)
export const pipeP = K.liftRec(
  process.env.NODE_ENV === 'production'
    ? R.pipeP
    : function pipeP() {
        if (!pipeP.warned) {
          pipeP.warned = 1
          console.warn("Warning: `pipeP` has been deprecated in favor of `pipeWith(then)`.")
        }
        return R.pipeP.apply(this, arguments)
      }
)
export const pipeWith = K.liftRec(R.pipeWith)
export const pluck = K.lift(R.pluck)
export const prepend = K.lift(R.prepend)
export const product = K.lift(R.product)
export const project = K.lift(R.project)
export const prop = K.lift(R.prop)
export const propEq = K.lift(R.propEq)
export const propIs = K.lift(R.propIs)
export const propOr = K.lift(R.propOr)
export const propSatisfies = K.lift(R.propSatisfies)
export const props = K.lift(R.props)
export const range = K.lift(R.range)
export const reduce = K.lift(R.reduce)
export const reduceBy = K.liftRec(R.reduceBy)
export const reduceRight = K.lift(R.reduceRight)
export const reduceWhile = K.liftRec(R.reduceWhile)
export const reduced = K.lift(R.reduced)
export const reject = K.lift(R.reject)
export const remove = K.lift(R.remove)
export const repeat = K.lift(R.repeat)
export const replace = K.lift(R.replace)
export const reverse = K.lift(R.reverse)
export const scan = K.lift(R.scan)
export const sequence = K.lift(R.sequence)
export const set = K.lift(R.set)
export const slice = K.lift(R.slice)
export const sort = K.lift(R.sort)
export const sortBy = K.lift(R.sortBy)
export const sortWith = K.lift(R.sortWith)
export const split = K.lift(R.split)
export const splitAt = K.lift(R.splitAt)
export const splitEvery = K.lift(R.splitEvery)
export const splitWhen = K.lift(R.splitWhen)
export const startsWith = K.lift(R.startsWith)
export const subtract = K.lift(R.subtract)
export const sum = K.lift(R.sum)
export const symmetricDifference = K.lift(R.symmetricDifference)
export const symmetricDifferenceWith = K.lift(R.symmetricDifferenceWith)
export const tail = K.lift(R.tail)
export const take = K.lift(R.take)
export const takeLast = K.lift(R.takeLast)
export const takeLastWhile = K.lift(R.takeLastWhile)
export const takeWhile = K.lift(R.takeWhile)
export const tap = K.lift(R.tap)
export const test = K.lift(R.test)
export const thunkify = K.liftRec(R.thunkify)
export const times = K.lift(R.times)
export const toLower = K.lift(R.toLower)
export const toPairs = K.lift(R.toPairs)
export const toPairsIn = K.lift(R.toPairsIn)
export const toString = K.lift(R.toString)
export const toUpper = K.lift(R.toUpper)
export const transduce = K.lift(R.transduce)
export const transpose = K.lift(R.transpose)
export const traverse = K.lift(R.traverse)
export const trim = K.lift(R.trim)
export const tryCatch = K.liftRec(R.tryCatch)
export const type = K.lift(R.type)
export const unapply = K.liftRec(R.unapply)
export const unary = K.liftRec(R.unary)
export const uncurryN = K.liftRec(R.uncurryN)
export const unfold = K.lift(R.unfold)
export const union = K.lift(R.union)
export const unionWith = K.lift(R.unionWith)
export const uniq = K.lift(R.uniq)
export const uniqBy = K.lift(R.uniqBy)
export const uniqWith = K.lift(R.uniqWith)
export const unless = K.lift(R.unless)
export const unnest = K.lift(R.unnest)
export const until = K.lift(R.until)
export const update = K.lift(R.update)
export const useWith = K.liftRec(R.useWith)
export const values = K.lift(R.values)
export const valuesIn = K.lift(R.valuesIn)
export const view = K.lift(R.view)
export const when = K.lift(R.when)
export const where = K.lift(R.where)
export const whereEq = K.lift(R.whereEq)
export const without = K.lift(R.without)
export const xor = K.lift(R.xor)
export const xprod = K.lift(R.xprod)
export const zip = K.lift(R.zip)
export const zipObj = K.lift(R.zipObj)
export const zipWith = K.lift(R.zipWith)
