import * as R from 'ramda'
import {Observable} from 'kefir'
import {combines} from 'kefir.combines'

function arityOf(g, f) {
  switch (g.length) {
    case 0:
      return f
    case 1:
      return function(_1) {
        return f.apply(null, arguments)
      }
    case 2:
      return function(_1, _2) {
        return f.apply(null, arguments)
      }
    case 3:
      return function(_1, _2, _3) {
        return f.apply(null, arguments)
      }
    case 4:
      return function(_1, _2, _3, _4) {
        return f.apply(null, arguments)
      }
  }
  throw Error(`Unsupported arity for ${g}`)
}

function liftR(f) {
  if (typeof f !== 'function') {
    if (f instanceof Observable) {
      return combines(f, liftR)
    } else {
      return f
    }
  } else {
    return arityOf(f, function() {
      const n = arguments.length
      const xs = Array(n + 1)
      for (let i = 0; i < n; ++i) xs[i] = arguments[i]
      xs[n] = f
      return liftR(combines.apply(null, xs))
    })
  }
}

export const F = liftR(R.F)
export const T = liftR(R.T)
export const __ = liftR(R.__)
export const add = liftR(R.add)
export const addIndex = liftR(R.addIndex)
export const adjust = liftR(R.adjust)
export const all = liftR(R.all)
export const allPass = liftR(R.allPass)
export const always = liftR(R.always)
export const and = liftR(R.and)
export const any = liftR(R.any)
export const anyPass = liftR(R.anyPass)
export const ap = liftR(R.ap)
export const aperture = liftR(R.aperture)
export const append = liftR(R.append)
export const apply = liftR(R.apply)
export const applySpec = liftR(R.applySpec)
export const applyTo = liftR(R.applyTo)
export const ascend = liftR(R.ascend)
export const assoc = liftR(R.assoc)
export const assocPath = liftR(R.assocPath)
export const binary = liftR(R.binary)
export const bind = liftR(R.bind)
export const both = liftR(R.both)
export const call = liftR(R.call)
export const chain = liftR(R.chain)
export const clamp = liftR(R.clamp)
export const clone = liftR(R.clone)
export const comparator = liftR(R.comparator)
export const complement = liftR(R.complement)
export const compose = liftR(R.compose)
export const composeK = liftR(R.composeK)
export const composeP = liftR(R.composeP)
export const concat = liftR(R.concat)
export const cond = liftR(R.cond)
export const construct = liftR(R.construct)
export const constructN = liftR(R.constructN)
export const contains = liftR(R.contains)
export const converge = liftR(R.converge)
export const countBy = liftR(R.countBy)
export const curry = liftR(R.curry)
export const curryN = liftR(R.curryN)
export const dec = liftR(R.dec)
export const defaultTo = liftR(R.defaultTo)
export const descend = liftR(R.descend)
export const difference = liftR(R.difference)
export const differenceWith = liftR(R.differenceWith)
export const dissoc = liftR(R.dissoc)
export const dissocPath = liftR(R.dissocPath)
export const divide = liftR(R.divide)
export const drop = liftR(R.drop)
export const dropLast = liftR(R.dropLast)
export const dropLastWhile = liftR(R.dropLastWhile)
export const dropRepeats = liftR(R.dropRepeats)
export const dropRepeatsWith = liftR(R.dropRepeatsWith)
export const dropWhile = liftR(R.dropWhile)
export const either = liftR(R.either)
export const empty = liftR(R.empty)
export const endsWith = liftR(R.endsWith)
export const eqBy = liftR(R.eqBy)
export const eqProps = liftR(R.eqProps)
export const equals = liftR(R.equals)
export const evolve = liftR(R.evolve)
export const filter = liftR(R.filter)
export const find = liftR(R.find)
export const findIndex = liftR(R.findIndex)
export const findLast = liftR(R.findLast)
export const findLastIndex = liftR(R.findLastIndex)
export const flatten = liftR(R.flatten)
export const flip = liftR(R.flip)
export const forEach = liftR(R.forEach)
export const forEachObjIndexed = liftR(R.forEachObjIndexed)
export const fromPairs = liftR(R.fromPairs)
export const groupBy = liftR(R.groupBy)
export const groupWith = liftR(R.groupWith)
export const gt = liftR(R.gt)
export const gte = liftR(R.gte)
export const has = liftR(R.has)
export const hasIn = liftR(R.hasIn)
export const head = liftR(R.head)
export const identical = liftR(R.identical)
export const identity = liftR(R.identity)
export const ifElse = liftR(R.ifElse)
export const inc = liftR(R.inc)
export const indexBy = liftR(R.indexBy)
export const indexOf = liftR(R.indexOf)
export const init = liftR(R.init)
export const innerJoin = liftR(R.innerJoin)
export const insert = liftR(R.insert)
export const insertAll = liftR(R.insertAll)
export const intersection = liftR(R.intersection)
export const intersperse = liftR(R.intersperse)
export const into = liftR(R.into)
export const invert = liftR(R.invert)
export const invertObj = liftR(R.invertObj)
export const invoker = liftR(R.invoker)
export const is = liftR(R.is)
export const isEmpty = liftR(R.isEmpty)
export const isNil = liftR(R.isNil)
export const join = liftR(R.join)
export const juxt = liftR(R.juxt)
export const keys = liftR(R.keys)
export const keysIn = liftR(R.keysIn)
export const last = liftR(R.last)
export const lastIndexOf = liftR(R.lastIndexOf)
export const length = liftR(R.length)
export const lens = liftR(R.lens)
export const lensIndex = liftR(R.lensIndex)
export const lensPath = liftR(R.lensPath)
export const lensProp = liftR(R.lensProp)
export const lift = liftR(R.lift)
export const liftN = liftR(R.liftN)
export const lt = liftR(R.lt)
export const lte = liftR(R.lte)
export const map = liftR(R.map)
export const mapAccum = liftR(R.mapAccum)
export const mapAccumRight = liftR(R.mapAccumRight)
export const mapObjIndexed = liftR(R.mapObjIndexed)
export const match = liftR(R.match)
export const mathMod = liftR(R.mathMod)
export const max = liftR(R.max)
export const maxBy = liftR(R.maxBy)
export const mean = liftR(R.mean)
export const median = liftR(R.median)
export const memoize = liftR(R.memoize)
export const memoizeWith = liftR(R.memoizeWith)
export const merge = liftR(R.merge)
export const mergeAll = liftR(R.mergeAll)
export const mergeDeepLeft = liftR(R.mergeDeepLeft)
export const mergeDeepRight = liftR(R.mergeDeepRight)
export const mergeDeepWith = liftR(R.mergeDeepWith)
export const mergeDeepWithKey = liftR(R.mergeDeepWithKey)
export const mergeWith = liftR(R.mergeWith)
export const mergeWithKey = liftR(R.mergeWithKey)
export const min = liftR(R.min)
export const minBy = liftR(R.minBy)
export const modulo = liftR(R.modulo)
export const multiply = liftR(R.multiply)
export const nAry = liftR(R.nAry)
export const negate = liftR(R.negate)
export const none = liftR(R.none)
export const not = liftR(R.not)
export const nth = liftR(R.nth)
export const nthArg = liftR(R.nthArg)
export const o = liftR(R.o)
export const objOf = liftR(R.objOf)
export const of = liftR(R.of)
export const omit = liftR(R.omit)
export const once = liftR(R.once)
export const or = liftR(R.or)
export const over = liftR(R.over)
export const pair = liftR(R.pair)
export const partial = liftR(R.partial)
export const partialRight = liftR(R.partialRight)
export const partition = liftR(R.partition)
export const path = liftR(R.path)
export const pathEq = liftR(R.pathEq)
export const pathOr = liftR(R.pathOr)
export const pathSatisfies = liftR(R.pathSatisfies)
export const pick = liftR(R.pick)
export const pickAll = liftR(R.pickAll)
export const pickBy = liftR(R.pickBy)
export const pipe = liftR(R.pipe)
export const pipeK = liftR(R.pipeK)
export const pipeP = liftR(R.pipeP)
export const pluck = liftR(R.pluck)
export const prepend = liftR(R.prepend)
export const product = liftR(R.product)
export const project = liftR(R.project)
export const prop = liftR(R.prop)
export const propEq = liftR(R.propEq)
export const propIs = liftR(R.propIs)
export const propOr = liftR(R.propOr)
export const propSatisfies = liftR(R.propSatisfies)
export const props = liftR(R.props)
export const range = liftR(R.range)
export const reduce = liftR(R.reduce)
export const reduceBy = liftR(R.reduceBy)
export const reduceRight = liftR(R.reduceRight)
export const reduceWhile = liftR(R.reduceWhile)
export const reduced = liftR(R.reduced)
export const reject = liftR(R.reject)
export const remove = liftR(R.remove)
export const repeat = liftR(R.repeat)
export const replace = liftR(R.replace)
export const reverse = liftR(R.reverse)
export const scan = liftR(R.scan)
export const sequence = liftR(R.sequence)
export const set = liftR(R.set)
export const slice = liftR(R.slice)
export const sort = liftR(R.sort)
export const sortBy = liftR(R.sortBy)
export const sortWith = liftR(R.sortWith)
export const split = liftR(R.split)
export const splitAt = liftR(R.splitAt)
export const splitEvery = liftR(R.splitEvery)
export const splitWhen = liftR(R.splitWhen)
export const startsWith = liftR(R.startsWith)
export const subtract = liftR(R.subtract)
export const sum = liftR(R.sum)
export const symmetricDifference = liftR(R.symmetricDifference)
export const symmetricDifferenceWith = liftR(R.symmetricDifferenceWith)
export const tail = liftR(R.tail)
export const take = liftR(R.take)
export const takeLast = liftR(R.takeLast)
export const takeLastWhile = liftR(R.takeLastWhile)
export const takeWhile = liftR(R.takeWhile)
export const tap = liftR(R.tap)
export const test = liftR(R.test)
export const times = liftR(R.times)
export const toLower = liftR(R.toLower)
export const toPairs = liftR(R.toPairs)
export const toPairsIn = liftR(R.toPairsIn)
export const toString = liftR(R.toString)
export const toUpper = liftR(R.toUpper)
export const transduce = liftR(R.transduce)
export const transpose = liftR(R.transpose)
export const traverse = liftR(R.traverse)
export const trim = liftR(R.trim)
export const tryCatch = liftR(R.tryCatch)
export const type = liftR(R.type)
export const unapply = liftR(R.unapply)
export const unary = liftR(R.unary)
export const uncurryN = liftR(R.uncurryN)
export const unfold = liftR(R.unfold)
export const union = liftR(R.union)
export const unionWith = liftR(R.unionWith)
export const uniq = liftR(R.uniq)
export const uniqBy = liftR(R.uniqBy)
export const uniqWith = liftR(R.uniqWith)
export const unless = liftR(R.unless)
export const unnest = liftR(R.unnest)
export const until = liftR(R.until)
export const update = liftR(R.update)
export const useWith = liftR(R.useWith)
export const values = liftR(R.values)
export const valuesIn = liftR(R.valuesIn)
export const view = liftR(R.view)
export const when = liftR(R.when)
export const where = liftR(R.where)
export const whereEq = liftR(R.whereEq)
export const without = liftR(R.without)
export const xprod = liftR(R.xprod)
export const zip = liftR(R.zip)
export const zipObj = liftR(R.zipObj)
export const zipWith = liftR(R.zipWith)
