'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var R = require('ramda');
var kefir = require('kefir');
var kefir_combines = require('kefir.combines');

function arityOf(g, f) {
  switch (g.length) {
    case 0:
      return f;
    case 1:
      return function (_1) {
        return f.apply(null, arguments);
      };
    case 2:
      return function (_1, _2) {
        return f.apply(null, arguments);
      };
    case 3:
      return function (_1, _2, _3) {
        return f.apply(null, arguments);
      };
    case 4:
      return function (_1, _2, _3, _4) {
        return f.apply(null, arguments);
      };
  }
  throw Error('Unsupported arity for ' + g);
}

function liftR(f) {
  if (typeof f !== 'function') {
    if (f instanceof kefir.Observable) {
      return kefir_combines.combines(f, liftR);
    } else {
      return f;
    }
  } else {
    return arityOf(f, function () {
      var n = arguments.length;
      var xs = Array(n + 1);
      for (var i = 0; i < n; ++i) {
        xs[i] = arguments[i];
      }xs[n] = f;
      return liftR(kefir_combines.combines.apply(null, xs));
    });
  }
}

var F = /*#__PURE__*/liftR(R.F);
var T = /*#__PURE__*/liftR(R.T);
var __ = /*#__PURE__*/liftR(R.__);
var add = /*#__PURE__*/liftR(R.add);
var addIndex = /*#__PURE__*/liftR(R.addIndex);
var adjust = /*#__PURE__*/liftR(R.adjust);
var all = /*#__PURE__*/liftR(R.all);
var allPass = /*#__PURE__*/liftR(R.allPass);
var always = /*#__PURE__*/liftR(R.always);
var and = /*#__PURE__*/liftR(R.and);
var any = /*#__PURE__*/liftR(R.any);
var anyPass = /*#__PURE__*/liftR(R.anyPass);
var ap = /*#__PURE__*/liftR(R.ap);
var aperture = /*#__PURE__*/liftR(R.aperture);
var append = /*#__PURE__*/liftR(R.append);
var apply = /*#__PURE__*/liftR(R.apply);
var applySpec = /*#__PURE__*/liftR(R.applySpec);
var applyTo = /*#__PURE__*/liftR(R.applyTo);
var ascend = /*#__PURE__*/liftR(R.ascend);
var assoc = /*#__PURE__*/liftR(R.assoc);
var assocPath = /*#__PURE__*/liftR(R.assocPath);
var binary = /*#__PURE__*/liftR(R.binary);
var bind = /*#__PURE__*/liftR(R.bind);
var both = /*#__PURE__*/liftR(R.both);
var call = /*#__PURE__*/liftR(R.call);
var chain = /*#__PURE__*/liftR(R.chain);
var clamp = /*#__PURE__*/liftR(R.clamp);
var clone = /*#__PURE__*/liftR(R.clone);
var comparator = /*#__PURE__*/liftR(R.comparator);
var complement = /*#__PURE__*/liftR(R.complement);
var compose = /*#__PURE__*/liftR(R.compose);
var composeK = /*#__PURE__*/liftR(R.composeK);
var composeP = /*#__PURE__*/liftR(R.composeP);
var concat = /*#__PURE__*/liftR(R.concat);
var cond = /*#__PURE__*/liftR(R.cond);
var construct = /*#__PURE__*/liftR(R.construct);
var constructN = /*#__PURE__*/liftR(R.constructN);
var contains = /*#__PURE__*/liftR(R.contains);
var converge = /*#__PURE__*/liftR(R.converge);
var countBy = /*#__PURE__*/liftR(R.countBy);
var curry = /*#__PURE__*/liftR(R.curry);
var curryN = /*#__PURE__*/liftR(R.curryN);
var dec = /*#__PURE__*/liftR(R.dec);
var defaultTo = /*#__PURE__*/liftR(R.defaultTo);
var descend = /*#__PURE__*/liftR(R.descend);
var difference = /*#__PURE__*/liftR(R.difference);
var differenceWith = /*#__PURE__*/liftR(R.differenceWith);
var dissoc = /*#__PURE__*/liftR(R.dissoc);
var dissocPath = /*#__PURE__*/liftR(R.dissocPath);
var divide = /*#__PURE__*/liftR(R.divide);
var drop = /*#__PURE__*/liftR(R.drop);
var dropLast = /*#__PURE__*/liftR(R.dropLast);
var dropLastWhile = /*#__PURE__*/liftR(R.dropLastWhile);
var dropRepeats = /*#__PURE__*/liftR(R.dropRepeats);
var dropRepeatsWith = /*#__PURE__*/liftR(R.dropRepeatsWith);
var dropWhile = /*#__PURE__*/liftR(R.dropWhile);
var either = /*#__PURE__*/liftR(R.either);
var empty = /*#__PURE__*/liftR(R.empty);
var endsWith = /*#__PURE__*/liftR(R.endsWith);
var eqBy = /*#__PURE__*/liftR(R.eqBy);
var eqProps = /*#__PURE__*/liftR(R.eqProps);
var equals = /*#__PURE__*/liftR(R.equals);
var evolve = /*#__PURE__*/liftR(R.evolve);
var filter = /*#__PURE__*/liftR(R.filter);
var find = /*#__PURE__*/liftR(R.find);
var findIndex = /*#__PURE__*/liftR(R.findIndex);
var findLast = /*#__PURE__*/liftR(R.findLast);
var findLastIndex = /*#__PURE__*/liftR(R.findLastIndex);
var flatten = /*#__PURE__*/liftR(R.flatten);
var flip = /*#__PURE__*/liftR(R.flip);
var forEach = /*#__PURE__*/liftR(R.forEach);
var forEachObjIndexed = /*#__PURE__*/liftR(R.forEachObjIndexed);
var fromPairs = /*#__PURE__*/liftR(R.fromPairs);
var groupBy = /*#__PURE__*/liftR(R.groupBy);
var groupWith = /*#__PURE__*/liftR(R.groupWith);
var gt = /*#__PURE__*/liftR(R.gt);
var gte = /*#__PURE__*/liftR(R.gte);
var has = /*#__PURE__*/liftR(R.has);
var hasIn = /*#__PURE__*/liftR(R.hasIn);
var head = /*#__PURE__*/liftR(R.head);
var identical = /*#__PURE__*/liftR(R.identical);
var identity = /*#__PURE__*/liftR(R.identity);
var ifElse = /*#__PURE__*/liftR(R.ifElse);
var inc = /*#__PURE__*/liftR(R.inc);
var indexBy = /*#__PURE__*/liftR(R.indexBy);
var indexOf = /*#__PURE__*/liftR(R.indexOf);
var init = /*#__PURE__*/liftR(R.init);
var innerJoin = /*#__PURE__*/liftR(R.innerJoin);
var insert = /*#__PURE__*/liftR(R.insert);
var insertAll = /*#__PURE__*/liftR(R.insertAll);
var intersection = /*#__PURE__*/liftR(R.intersection);
var intersperse = /*#__PURE__*/liftR(R.intersperse);
var into = /*#__PURE__*/liftR(R.into);
var invert = /*#__PURE__*/liftR(R.invert);
var invertObj = /*#__PURE__*/liftR(R.invertObj);
var invoker = /*#__PURE__*/liftR(R.invoker);
var is = /*#__PURE__*/liftR(R.is);
var isEmpty = /*#__PURE__*/liftR(R.isEmpty);
var isNil = /*#__PURE__*/liftR(R.isNil);
var join = /*#__PURE__*/liftR(R.join);
var juxt = /*#__PURE__*/liftR(R.juxt);
var keys = /*#__PURE__*/liftR(R.keys);
var keysIn = /*#__PURE__*/liftR(R.keysIn);
var last = /*#__PURE__*/liftR(R.last);
var lastIndexOf = /*#__PURE__*/liftR(R.lastIndexOf);
var length = /*#__PURE__*/liftR(R.length);
var lens = /*#__PURE__*/liftR(R.lens);
var lensIndex = /*#__PURE__*/liftR(R.lensIndex);
var lensPath = /*#__PURE__*/liftR(R.lensPath);
var lensProp = /*#__PURE__*/liftR(R.lensProp);
var lift = /*#__PURE__*/liftR(R.lift);
var liftN = /*#__PURE__*/liftR(R.liftN);
var lt = /*#__PURE__*/liftR(R.lt);
var lte = /*#__PURE__*/liftR(R.lte);
var map = /*#__PURE__*/liftR(R.map);
var mapAccum = /*#__PURE__*/liftR(R.mapAccum);
var mapAccumRight = /*#__PURE__*/liftR(R.mapAccumRight);
var mapObjIndexed = /*#__PURE__*/liftR(R.mapObjIndexed);
var match = /*#__PURE__*/liftR(R.match);
var mathMod = /*#__PURE__*/liftR(R.mathMod);
var max = /*#__PURE__*/liftR(R.max);
var maxBy = /*#__PURE__*/liftR(R.maxBy);
var mean = /*#__PURE__*/liftR(R.mean);
var median = /*#__PURE__*/liftR(R.median);
var memoize = /*#__PURE__*/liftR(R.memoize);
var memoizeWith = /*#__PURE__*/liftR(R.memoizeWith);
var merge = /*#__PURE__*/liftR(R.merge);
var mergeAll = /*#__PURE__*/liftR(R.mergeAll);
var mergeDeepLeft = /*#__PURE__*/liftR(R.mergeDeepLeft);
var mergeDeepRight = /*#__PURE__*/liftR(R.mergeDeepRight);
var mergeDeepWith = /*#__PURE__*/liftR(R.mergeDeepWith);
var mergeDeepWithKey = /*#__PURE__*/liftR(R.mergeDeepWithKey);
var mergeWith = /*#__PURE__*/liftR(R.mergeWith);
var mergeWithKey = /*#__PURE__*/liftR(R.mergeWithKey);
var min = /*#__PURE__*/liftR(R.min);
var minBy = /*#__PURE__*/liftR(R.minBy);
var modulo = /*#__PURE__*/liftR(R.modulo);
var multiply = /*#__PURE__*/liftR(R.multiply);
var nAry = /*#__PURE__*/liftR(R.nAry);
var negate = /*#__PURE__*/liftR(R.negate);
var none = /*#__PURE__*/liftR(R.none);
var not = /*#__PURE__*/liftR(R.not);
var nth = /*#__PURE__*/liftR(R.nth);
var nthArg = /*#__PURE__*/liftR(R.nthArg);
var o = /*#__PURE__*/liftR(R.o);
var objOf = /*#__PURE__*/liftR(R.objOf);
var of = /*#__PURE__*/liftR(R.of);
var omit = /*#__PURE__*/liftR(R.omit);
var once = /*#__PURE__*/liftR(R.once);
var or = /*#__PURE__*/liftR(R.or);
var over = /*#__PURE__*/liftR(R.over);
var pair = /*#__PURE__*/liftR(R.pair);
var partial = /*#__PURE__*/liftR(R.partial);
var partialRight = /*#__PURE__*/liftR(R.partialRight);
var partition = /*#__PURE__*/liftR(R.partition);
var path = /*#__PURE__*/liftR(R.path);
var pathEq = /*#__PURE__*/liftR(R.pathEq);
var pathOr = /*#__PURE__*/liftR(R.pathOr);
var pathSatisfies = /*#__PURE__*/liftR(R.pathSatisfies);
var pick = /*#__PURE__*/liftR(R.pick);
var pickAll = /*#__PURE__*/liftR(R.pickAll);
var pickBy = /*#__PURE__*/liftR(R.pickBy);
var pipe = /*#__PURE__*/liftR(R.pipe);
var pipeK = /*#__PURE__*/liftR(R.pipeK);
var pipeP = /*#__PURE__*/liftR(R.pipeP);
var pluck = /*#__PURE__*/liftR(R.pluck);
var prepend = /*#__PURE__*/liftR(R.prepend);
var product = /*#__PURE__*/liftR(R.product);
var project = /*#__PURE__*/liftR(R.project);
var prop = /*#__PURE__*/liftR(R.prop);
var propEq = /*#__PURE__*/liftR(R.propEq);
var propIs = /*#__PURE__*/liftR(R.propIs);
var propOr = /*#__PURE__*/liftR(R.propOr);
var propSatisfies = /*#__PURE__*/liftR(R.propSatisfies);
var props = /*#__PURE__*/liftR(R.props);
var range = /*#__PURE__*/liftR(R.range);
var reduce = /*#__PURE__*/liftR(R.reduce);
var reduceBy = /*#__PURE__*/liftR(R.reduceBy);
var reduceRight = /*#__PURE__*/liftR(R.reduceRight);
var reduceWhile = /*#__PURE__*/liftR(R.reduceWhile);
var reduced = /*#__PURE__*/liftR(R.reduced);
var reject = /*#__PURE__*/liftR(R.reject);
var remove = /*#__PURE__*/liftR(R.remove);
var repeat = /*#__PURE__*/liftR(R.repeat);
var replace = /*#__PURE__*/liftR(R.replace);
var reverse = /*#__PURE__*/liftR(R.reverse);
var scan = /*#__PURE__*/liftR(R.scan);
var sequence = /*#__PURE__*/liftR(R.sequence);
var set = /*#__PURE__*/liftR(R.set);
var slice = /*#__PURE__*/liftR(R.slice);
var sort = /*#__PURE__*/liftR(R.sort);
var sortBy = /*#__PURE__*/liftR(R.sortBy);
var sortWith = /*#__PURE__*/liftR(R.sortWith);
var split = /*#__PURE__*/liftR(R.split);
var splitAt = /*#__PURE__*/liftR(R.splitAt);
var splitEvery = /*#__PURE__*/liftR(R.splitEvery);
var splitWhen = /*#__PURE__*/liftR(R.splitWhen);
var startsWith = /*#__PURE__*/liftR(R.startsWith);
var subtract = /*#__PURE__*/liftR(R.subtract);
var sum = /*#__PURE__*/liftR(R.sum);
var symmetricDifference = /*#__PURE__*/liftR(R.symmetricDifference);
var symmetricDifferenceWith = /*#__PURE__*/liftR(R.symmetricDifferenceWith);
var tail = /*#__PURE__*/liftR(R.tail);
var take = /*#__PURE__*/liftR(R.take);
var takeLast = /*#__PURE__*/liftR(R.takeLast);
var takeLastWhile = /*#__PURE__*/liftR(R.takeLastWhile);
var takeWhile = /*#__PURE__*/liftR(R.takeWhile);
var tap = /*#__PURE__*/liftR(R.tap);
var test = /*#__PURE__*/liftR(R.test);
var times = /*#__PURE__*/liftR(R.times);
var toLower = /*#__PURE__*/liftR(R.toLower);
var toPairs = /*#__PURE__*/liftR(R.toPairs);
var toPairsIn = /*#__PURE__*/liftR(R.toPairsIn);
var toString = /*#__PURE__*/liftR(R.toString);
var toUpper = /*#__PURE__*/liftR(R.toUpper);
var transduce = /*#__PURE__*/liftR(R.transduce);
var transpose = /*#__PURE__*/liftR(R.transpose);
var traverse = /*#__PURE__*/liftR(R.traverse);
var trim = /*#__PURE__*/liftR(R.trim);
var tryCatch = /*#__PURE__*/liftR(R.tryCatch);
var type = /*#__PURE__*/liftR(R.type);
var unapply = /*#__PURE__*/liftR(R.unapply);
var unary = /*#__PURE__*/liftR(R.unary);
var uncurryN = /*#__PURE__*/liftR(R.uncurryN);
var unfold = /*#__PURE__*/liftR(R.unfold);
var union = /*#__PURE__*/liftR(R.union);
var unionWith = /*#__PURE__*/liftR(R.unionWith);
var uniq = /*#__PURE__*/liftR(R.uniq);
var uniqBy = /*#__PURE__*/liftR(R.uniqBy);
var uniqWith = /*#__PURE__*/liftR(R.uniqWith);
var unless = /*#__PURE__*/liftR(R.unless);
var unnest = /*#__PURE__*/liftR(R.unnest);
var until = /*#__PURE__*/liftR(R.until);
var update = /*#__PURE__*/liftR(R.update);
var useWith = /*#__PURE__*/liftR(R.useWith);
var values = /*#__PURE__*/liftR(R.values);
var valuesIn = /*#__PURE__*/liftR(R.valuesIn);
var view = /*#__PURE__*/liftR(R.view);
var when = /*#__PURE__*/liftR(R.when);
var where = /*#__PURE__*/liftR(R.where);
var whereEq = /*#__PURE__*/liftR(R.whereEq);
var without = /*#__PURE__*/liftR(R.without);
var xprod = /*#__PURE__*/liftR(R.xprod);
var zip = /*#__PURE__*/liftR(R.zip);
var zipObj = /*#__PURE__*/liftR(R.zipObj);
var zipWith = /*#__PURE__*/liftR(R.zipWith);

exports.F = F;
exports.T = T;
exports.__ = __;
exports.add = add;
exports.addIndex = addIndex;
exports.adjust = adjust;
exports.all = all;
exports.allPass = allPass;
exports.always = always;
exports.and = and;
exports.any = any;
exports.anyPass = anyPass;
exports.ap = ap;
exports.aperture = aperture;
exports.append = append;
exports.apply = apply;
exports.applySpec = applySpec;
exports.applyTo = applyTo;
exports.ascend = ascend;
exports.assoc = assoc;
exports.assocPath = assocPath;
exports.binary = binary;
exports.bind = bind;
exports.both = both;
exports.call = call;
exports.chain = chain;
exports.clamp = clamp;
exports.clone = clone;
exports.comparator = comparator;
exports.complement = complement;
exports.compose = compose;
exports.composeK = composeK;
exports.composeP = composeP;
exports.concat = concat;
exports.cond = cond;
exports.construct = construct;
exports.constructN = constructN;
exports.contains = contains;
exports.converge = converge;
exports.countBy = countBy;
exports.curry = curry;
exports.curryN = curryN;
exports.dec = dec;
exports.defaultTo = defaultTo;
exports.descend = descend;
exports.difference = difference;
exports.differenceWith = differenceWith;
exports.dissoc = dissoc;
exports.dissocPath = dissocPath;
exports.divide = divide;
exports.drop = drop;
exports.dropLast = dropLast;
exports.dropLastWhile = dropLastWhile;
exports.dropRepeats = dropRepeats;
exports.dropRepeatsWith = dropRepeatsWith;
exports.dropWhile = dropWhile;
exports.either = either;
exports.empty = empty;
exports.endsWith = endsWith;
exports.eqBy = eqBy;
exports.eqProps = eqProps;
exports.equals = equals;
exports.evolve = evolve;
exports.filter = filter;
exports.find = find;
exports.findIndex = findIndex;
exports.findLast = findLast;
exports.findLastIndex = findLastIndex;
exports.flatten = flatten;
exports.flip = flip;
exports.forEach = forEach;
exports.forEachObjIndexed = forEachObjIndexed;
exports.fromPairs = fromPairs;
exports.groupBy = groupBy;
exports.groupWith = groupWith;
exports.gt = gt;
exports.gte = gte;
exports.has = has;
exports.hasIn = hasIn;
exports.head = head;
exports.identical = identical;
exports.identity = identity;
exports.ifElse = ifElse;
exports.inc = inc;
exports.indexBy = indexBy;
exports.indexOf = indexOf;
exports.init = init;
exports.innerJoin = innerJoin;
exports.insert = insert;
exports.insertAll = insertAll;
exports.intersection = intersection;
exports.intersperse = intersperse;
exports.into = into;
exports.invert = invert;
exports.invertObj = invertObj;
exports.invoker = invoker;
exports.is = is;
exports.isEmpty = isEmpty;
exports.isNil = isNil;
exports.join = join;
exports.juxt = juxt;
exports.keys = keys;
exports.keysIn = keysIn;
exports.last = last;
exports.lastIndexOf = lastIndexOf;
exports.length = length;
exports.lens = lens;
exports.lensIndex = lensIndex;
exports.lensPath = lensPath;
exports.lensProp = lensProp;
exports.lift = lift;
exports.liftN = liftN;
exports.lt = lt;
exports.lte = lte;
exports.map = map;
exports.mapAccum = mapAccum;
exports.mapAccumRight = mapAccumRight;
exports.mapObjIndexed = mapObjIndexed;
exports.match = match;
exports.mathMod = mathMod;
exports.max = max;
exports.maxBy = maxBy;
exports.mean = mean;
exports.median = median;
exports.memoize = memoize;
exports.memoizeWith = memoizeWith;
exports.merge = merge;
exports.mergeAll = mergeAll;
exports.mergeDeepLeft = mergeDeepLeft;
exports.mergeDeepRight = mergeDeepRight;
exports.mergeDeepWith = mergeDeepWith;
exports.mergeDeepWithKey = mergeDeepWithKey;
exports.mergeWith = mergeWith;
exports.mergeWithKey = mergeWithKey;
exports.min = min;
exports.minBy = minBy;
exports.modulo = modulo;
exports.multiply = multiply;
exports.nAry = nAry;
exports.negate = negate;
exports.none = none;
exports.not = not;
exports.nth = nth;
exports.nthArg = nthArg;
exports.o = o;
exports.objOf = objOf;
exports.of = of;
exports.omit = omit;
exports.once = once;
exports.or = or;
exports.over = over;
exports.pair = pair;
exports.partial = partial;
exports.partialRight = partialRight;
exports.partition = partition;
exports.path = path;
exports.pathEq = pathEq;
exports.pathOr = pathOr;
exports.pathSatisfies = pathSatisfies;
exports.pick = pick;
exports.pickAll = pickAll;
exports.pickBy = pickBy;
exports.pipe = pipe;
exports.pipeK = pipeK;
exports.pipeP = pipeP;
exports.pluck = pluck;
exports.prepend = prepend;
exports.product = product;
exports.project = project;
exports.prop = prop;
exports.propEq = propEq;
exports.propIs = propIs;
exports.propOr = propOr;
exports.propSatisfies = propSatisfies;
exports.props = props;
exports.range = range;
exports.reduce = reduce;
exports.reduceBy = reduceBy;
exports.reduceRight = reduceRight;
exports.reduceWhile = reduceWhile;
exports.reduced = reduced;
exports.reject = reject;
exports.remove = remove;
exports.repeat = repeat;
exports.replace = replace;
exports.reverse = reverse;
exports.scan = scan;
exports.sequence = sequence;
exports.set = set;
exports.slice = slice;
exports.sort = sort;
exports.sortBy = sortBy;
exports.sortWith = sortWith;
exports.split = split;
exports.splitAt = splitAt;
exports.splitEvery = splitEvery;
exports.splitWhen = splitWhen;
exports.startsWith = startsWith;
exports.subtract = subtract;
exports.sum = sum;
exports.symmetricDifference = symmetricDifference;
exports.symmetricDifferenceWith = symmetricDifferenceWith;
exports.tail = tail;
exports.take = take;
exports.takeLast = takeLast;
exports.takeLastWhile = takeLastWhile;
exports.takeWhile = takeWhile;
exports.tap = tap;
exports.test = test;
exports.times = times;
exports.toLower = toLower;
exports.toPairs = toPairs;
exports.toPairsIn = toPairsIn;
exports.toString = toString;
exports.toUpper = toUpper;
exports.transduce = transduce;
exports.transpose = transpose;
exports.traverse = traverse;
exports.trim = trim;
exports.tryCatch = tryCatch;
exports.type = type;
exports.unapply = unapply;
exports.unary = unary;
exports.uncurryN = uncurryN;
exports.unfold = unfold;
exports.union = union;
exports.unionWith = unionWith;
exports.uniq = uniq;
exports.uniqBy = uniqBy;
exports.uniqWith = uniqWith;
exports.unless = unless;
exports.unnest = unnest;
exports.until = until;
exports.update = update;
exports.useWith = useWith;
exports.values = values;
exports.valuesIn = valuesIn;
exports.view = view;
exports.when = when;
exports.where = where;
exports.whereEq = whereEq;
exports.without = without;
exports.xprod = xprod;
exports.zip = zip;
exports.zipObj = zipObj;
exports.zipWith = zipWith;
