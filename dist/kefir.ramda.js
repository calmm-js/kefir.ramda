(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ramda'), require('kefir.combines')) :
	typeof define === 'function' && define.amd ? define(['exports', 'ramda', 'kefir.combines'], factory) :
	(factory((global.Kefir = global.Kefir || {}, global.Kefir.ramda = {}),global.R,global.kefir.combines));
}(this, (function (exports,R,kefir_combines) { 'use strict';

	var F = /*#__PURE__*/kefir_combines.liftRec(R.F);
	var T = /*#__PURE__*/kefir_combines.liftRec(R.T);
	var __ = /*#__PURE__*/kefir_combines.liftRec(R.__);
	var add = /*#__PURE__*/kefir_combines.liftRec(R.add);
	var addIndex = /*#__PURE__*/kefir_combines.liftRec(R.addIndex);
	var adjust = /*#__PURE__*/kefir_combines.liftRec(R.adjust);
	var all = /*#__PURE__*/kefir_combines.liftRec(R.all);
	var allPass = /*#__PURE__*/kefir_combines.liftRec(R.allPass);
	var always = /*#__PURE__*/kefir_combines.liftRec(R.always);
	var and = /*#__PURE__*/kefir_combines.liftRec(R.and);
	var any = /*#__PURE__*/kefir_combines.liftRec(R.any);
	var anyPass = /*#__PURE__*/kefir_combines.liftRec(R.anyPass);
	var ap = /*#__PURE__*/kefir_combines.liftRec(R.ap);
	var aperture = /*#__PURE__*/kefir_combines.liftRec(R.aperture);
	var append = /*#__PURE__*/kefir_combines.liftRec(R.append);
	var apply = /*#__PURE__*/kefir_combines.liftRec(R.apply);
	var applySpec = /*#__PURE__*/kefir_combines.liftRec(R.applySpec);
	var applyTo = /*#__PURE__*/kefir_combines.liftRec(R.applyTo);
	var ascend = /*#__PURE__*/kefir_combines.liftRec(R.ascend);
	var assoc = /*#__PURE__*/kefir_combines.liftRec(R.assoc);
	var assocPath = /*#__PURE__*/kefir_combines.liftRec(R.assocPath);
	var binary = /*#__PURE__*/kefir_combines.liftRec(R.binary);
	var bind = /*#__PURE__*/kefir_combines.liftRec(R.bind);
	var both = /*#__PURE__*/kefir_combines.liftRec(R.both);
	var call = /*#__PURE__*/kefir_combines.liftRec(R.call);
	var chain = /*#__PURE__*/kefir_combines.liftRec(R.chain);
	var clamp = /*#__PURE__*/kefir_combines.liftRec(R.clamp);
	var clone = /*#__PURE__*/kefir_combines.liftRec(R.clone);
	var comparator = /*#__PURE__*/kefir_combines.liftRec(R.comparator);
	var complement = /*#__PURE__*/kefir_combines.liftRec(R.complement);
	var compose = /*#__PURE__*/kefir_combines.liftRec(R.compose);
	var composeK = /*#__PURE__*/kefir_combines.liftRec(R.composeK);
	var composeP = /*#__PURE__*/kefir_combines.liftRec(R.composeP);
	var concat = /*#__PURE__*/kefir_combines.liftRec(R.concat);
	var cond = /*#__PURE__*/kefir_combines.liftRec(R.cond);
	var construct = /*#__PURE__*/kefir_combines.liftRec(R.construct);
	var constructN = /*#__PURE__*/kefir_combines.liftRec(R.constructN);
	var contains = /*#__PURE__*/kefir_combines.liftRec(R.contains);
	var converge = /*#__PURE__*/kefir_combines.liftRec(R.converge);
	var countBy = /*#__PURE__*/kefir_combines.liftRec(R.countBy);
	var curry = /*#__PURE__*/kefir_combines.liftRec(R.curry);
	var curryN = /*#__PURE__*/kefir_combines.liftRec(R.curryN);
	var dec = /*#__PURE__*/kefir_combines.liftRec(R.dec);
	var defaultTo = /*#__PURE__*/kefir_combines.liftRec(R.defaultTo);
	var descend = /*#__PURE__*/kefir_combines.liftRec(R.descend);
	var difference = /*#__PURE__*/kefir_combines.liftRec(R.difference);
	var differenceWith = /*#__PURE__*/kefir_combines.liftRec(R.differenceWith);
	var dissoc = /*#__PURE__*/kefir_combines.liftRec(R.dissoc);
	var dissocPath = /*#__PURE__*/kefir_combines.liftRec(R.dissocPath);
	var divide = /*#__PURE__*/kefir_combines.liftRec(R.divide);
	var drop = /*#__PURE__*/kefir_combines.liftRec(R.drop);
	var dropLast = /*#__PURE__*/kefir_combines.liftRec(R.dropLast);
	var dropLastWhile = /*#__PURE__*/kefir_combines.liftRec(R.dropLastWhile);
	var dropRepeats = /*#__PURE__*/kefir_combines.liftRec(R.dropRepeats);
	var dropRepeatsWith = /*#__PURE__*/kefir_combines.liftRec(R.dropRepeatsWith);
	var dropWhile = /*#__PURE__*/kefir_combines.liftRec(R.dropWhile);
	var either = /*#__PURE__*/kefir_combines.liftRec(R.either);
	var empty = /*#__PURE__*/kefir_combines.liftRec(R.empty);
	var endsWith = /*#__PURE__*/kefir_combines.liftRec(R.endsWith);
	var eqBy = /*#__PURE__*/kefir_combines.liftRec(R.eqBy);
	var eqProps = /*#__PURE__*/kefir_combines.liftRec(R.eqProps);
	var equals = /*#__PURE__*/kefir_combines.liftRec(R.equals);
	var evolve = /*#__PURE__*/kefir_combines.liftRec(R.evolve);
	var filter = /*#__PURE__*/kefir_combines.liftRec(R.filter);
	var find = /*#__PURE__*/kefir_combines.liftRec(R.find);
	var findIndex = /*#__PURE__*/kefir_combines.liftRec(R.findIndex);
	var findLast = /*#__PURE__*/kefir_combines.liftRec(R.findLast);
	var findLastIndex = /*#__PURE__*/kefir_combines.liftRec(R.findLastIndex);
	var flatten = /*#__PURE__*/kefir_combines.liftRec(R.flatten);
	var flip = /*#__PURE__*/kefir_combines.liftRec(R.flip);
	var forEach = /*#__PURE__*/kefir_combines.liftRec(R.forEach);
	var forEachObjIndexed = /*#__PURE__*/kefir_combines.liftRec(R.forEachObjIndexed);
	var fromPairs = /*#__PURE__*/kefir_combines.liftRec(R.fromPairs);
	var groupBy = /*#__PURE__*/kefir_combines.liftRec(R.groupBy);
	var groupWith = /*#__PURE__*/kefir_combines.liftRec(R.groupWith);
	var gt = /*#__PURE__*/kefir_combines.liftRec(R.gt);
	var gte = /*#__PURE__*/kefir_combines.liftRec(R.gte);
	var has = /*#__PURE__*/kefir_combines.liftRec(R.has);
	var hasIn = /*#__PURE__*/kefir_combines.liftRec(R.hasIn);
	var head = /*#__PURE__*/kefir_combines.liftRec(R.head);
	var identical = /*#__PURE__*/kefir_combines.liftRec(R.identical);
	var identity = /*#__PURE__*/kefir_combines.liftRec(R.identity);
	var ifElse = /*#__PURE__*/kefir_combines.liftRec(R.ifElse);
	var inc = /*#__PURE__*/kefir_combines.liftRec(R.inc);
	var indexBy = /*#__PURE__*/kefir_combines.liftRec(R.indexBy);
	var indexOf = /*#__PURE__*/kefir_combines.liftRec(R.indexOf);
	var init = /*#__PURE__*/kefir_combines.liftRec(R.init);
	var innerJoin = /*#__PURE__*/kefir_combines.liftRec(R.innerJoin);
	var insert = /*#__PURE__*/kefir_combines.liftRec(R.insert);
	var insertAll = /*#__PURE__*/kefir_combines.liftRec(R.insertAll);
	var intersection = /*#__PURE__*/kefir_combines.liftRec(R.intersection);
	var intersperse = /*#__PURE__*/kefir_combines.liftRec(R.intersperse);
	var into = /*#__PURE__*/kefir_combines.liftRec(R.into);
	var invert = /*#__PURE__*/kefir_combines.liftRec(R.invert);
	var invertObj = /*#__PURE__*/kefir_combines.liftRec(R.invertObj);
	var invoker = /*#__PURE__*/kefir_combines.liftRec(R.invoker);
	var is = /*#__PURE__*/kefir_combines.liftRec(R.is);
	var isEmpty = /*#__PURE__*/kefir_combines.liftRec(R.isEmpty);
	var isNil = /*#__PURE__*/kefir_combines.liftRec(R.isNil);
	var join = /*#__PURE__*/kefir_combines.liftRec(R.join);
	var juxt = /*#__PURE__*/kefir_combines.liftRec(R.juxt);
	var keys = /*#__PURE__*/kefir_combines.liftRec(R.keys);
	var keysIn = /*#__PURE__*/kefir_combines.liftRec(R.keysIn);
	var last = /*#__PURE__*/kefir_combines.liftRec(R.last);
	var lastIndexOf = /*#__PURE__*/kefir_combines.liftRec(R.lastIndexOf);
	var length = /*#__PURE__*/kefir_combines.liftRec(R.length);
	var lens = /*#__PURE__*/kefir_combines.liftRec(R.lens);
	var lensIndex = /*#__PURE__*/kefir_combines.liftRec(R.lensIndex);
	var lensPath = /*#__PURE__*/kefir_combines.liftRec(R.lensPath);
	var lensProp = /*#__PURE__*/kefir_combines.liftRec(R.lensProp);
	var lift = /*#__PURE__*/kefir_combines.liftRec(R.lift);
	var liftN = /*#__PURE__*/kefir_combines.liftRec(R.liftN);
	var lt = /*#__PURE__*/kefir_combines.liftRec(R.lt);
	var lte = /*#__PURE__*/kefir_combines.liftRec(R.lte);
	var map = /*#__PURE__*/kefir_combines.liftRec(R.map);
	var mapAccum = /*#__PURE__*/kefir_combines.liftRec(R.mapAccum);
	var mapAccumRight = /*#__PURE__*/kefir_combines.liftRec(R.mapAccumRight);
	var mapObjIndexed = /*#__PURE__*/kefir_combines.liftRec(R.mapObjIndexed);
	var match = /*#__PURE__*/kefir_combines.liftRec(R.match);
	var mathMod = /*#__PURE__*/kefir_combines.liftRec(R.mathMod);
	var max = /*#__PURE__*/kefir_combines.liftRec(R.max);
	var maxBy = /*#__PURE__*/kefir_combines.liftRec(R.maxBy);
	var mean = /*#__PURE__*/kefir_combines.liftRec(R.mean);
	var median = /*#__PURE__*/kefir_combines.liftRec(R.median);
	var memoize = /*#__PURE__*/kefir_combines.liftRec(R.memoize);
	var memoizeWith = /*#__PURE__*/kefir_combines.liftRec(R.memoizeWith);
	var merge = /*#__PURE__*/kefir_combines.liftRec(R.merge);
	var mergeAll = /*#__PURE__*/kefir_combines.liftRec(R.mergeAll);
	var mergeDeepLeft = /*#__PURE__*/kefir_combines.liftRec(R.mergeDeepLeft);
	var mergeDeepRight = /*#__PURE__*/kefir_combines.liftRec(R.mergeDeepRight);
	var mergeDeepWith = /*#__PURE__*/kefir_combines.liftRec(R.mergeDeepWith);
	var mergeDeepWithKey = /*#__PURE__*/kefir_combines.liftRec(R.mergeDeepWithKey);
	var mergeWith = /*#__PURE__*/kefir_combines.liftRec(R.mergeWith);
	var mergeWithKey = /*#__PURE__*/kefir_combines.liftRec(R.mergeWithKey);
	var min = /*#__PURE__*/kefir_combines.liftRec(R.min);
	var minBy = /*#__PURE__*/kefir_combines.liftRec(R.minBy);
	var modulo = /*#__PURE__*/kefir_combines.liftRec(R.modulo);
	var multiply = /*#__PURE__*/kefir_combines.liftRec(R.multiply);
	var nAry = /*#__PURE__*/kefir_combines.liftRec(R.nAry);
	var negate = /*#__PURE__*/kefir_combines.liftRec(R.negate);
	var none = /*#__PURE__*/kefir_combines.liftRec(R.none);
	var not = /*#__PURE__*/kefir_combines.liftRec(R.not);
	var nth = /*#__PURE__*/kefir_combines.liftRec(R.nth);
	var nthArg = /*#__PURE__*/kefir_combines.liftRec(R.nthArg);
	var o = /*#__PURE__*/kefir_combines.liftRec(R.o);
	var objOf = /*#__PURE__*/kefir_combines.liftRec(R.objOf);
	var of = /*#__PURE__*/kefir_combines.liftRec(R.of);
	var omit = /*#__PURE__*/kefir_combines.liftRec(R.omit);
	var once = /*#__PURE__*/kefir_combines.liftRec(R.once);
	var or = /*#__PURE__*/kefir_combines.liftRec(R.or);
	var over = /*#__PURE__*/kefir_combines.liftRec(R.over);
	var pair = /*#__PURE__*/kefir_combines.liftRec(R.pair);
	var partial = /*#__PURE__*/kefir_combines.liftRec(R.partial);
	var partialRight = /*#__PURE__*/kefir_combines.liftRec(R.partialRight);
	var partition = /*#__PURE__*/kefir_combines.liftRec(R.partition);
	var path = /*#__PURE__*/kefir_combines.liftRec(R.path);
	var pathEq = /*#__PURE__*/kefir_combines.liftRec(R.pathEq);
	var pathOr = /*#__PURE__*/kefir_combines.liftRec(R.pathOr);
	var pathSatisfies = /*#__PURE__*/kefir_combines.liftRec(R.pathSatisfies);
	var pick = /*#__PURE__*/kefir_combines.liftRec(R.pick);
	var pickAll = /*#__PURE__*/kefir_combines.liftRec(R.pickAll);
	var pickBy = /*#__PURE__*/kefir_combines.liftRec(R.pickBy);
	var pipe = /*#__PURE__*/kefir_combines.liftRec(R.pipe);
	var pipeK = /*#__PURE__*/kefir_combines.liftRec(R.pipeK);
	var pipeP = /*#__PURE__*/kefir_combines.liftRec(R.pipeP);
	var pluck = /*#__PURE__*/kefir_combines.liftRec(R.pluck);
	var prepend = /*#__PURE__*/kefir_combines.liftRec(R.prepend);
	var product = /*#__PURE__*/kefir_combines.liftRec(R.product);
	var project = /*#__PURE__*/kefir_combines.liftRec(R.project);
	var prop = /*#__PURE__*/kefir_combines.liftRec(R.prop);
	var propEq = /*#__PURE__*/kefir_combines.liftRec(R.propEq);
	var propIs = /*#__PURE__*/kefir_combines.liftRec(R.propIs);
	var propOr = /*#__PURE__*/kefir_combines.liftRec(R.propOr);
	var propSatisfies = /*#__PURE__*/kefir_combines.liftRec(R.propSatisfies);
	var props = /*#__PURE__*/kefir_combines.liftRec(R.props);
	var range = /*#__PURE__*/kefir_combines.liftRec(R.range);
	var reduce = /*#__PURE__*/kefir_combines.liftRec(R.reduce);
	var reduceBy = /*#__PURE__*/kefir_combines.liftRec(R.reduceBy);
	var reduceRight = /*#__PURE__*/kefir_combines.liftRec(R.reduceRight);
	var reduceWhile = /*#__PURE__*/kefir_combines.liftRec(R.reduceWhile);
	var reduced = /*#__PURE__*/kefir_combines.liftRec(R.reduced);
	var reject = /*#__PURE__*/kefir_combines.liftRec(R.reject);
	var remove = /*#__PURE__*/kefir_combines.liftRec(R.remove);
	var repeat = /*#__PURE__*/kefir_combines.liftRec(R.repeat);
	var replace = /*#__PURE__*/kefir_combines.liftRec(R.replace);
	var reverse = /*#__PURE__*/kefir_combines.liftRec(R.reverse);
	var scan = /*#__PURE__*/kefir_combines.liftRec(R.scan);
	var sequence = /*#__PURE__*/kefir_combines.liftRec(R.sequence);
	var set = /*#__PURE__*/kefir_combines.liftRec(R.set);
	var slice = /*#__PURE__*/kefir_combines.liftRec(R.slice);
	var sort = /*#__PURE__*/kefir_combines.liftRec(R.sort);
	var sortBy = /*#__PURE__*/kefir_combines.liftRec(R.sortBy);
	var sortWith = /*#__PURE__*/kefir_combines.liftRec(R.sortWith);
	var split = /*#__PURE__*/kefir_combines.liftRec(R.split);
	var splitAt = /*#__PURE__*/kefir_combines.liftRec(R.splitAt);
	var splitEvery = /*#__PURE__*/kefir_combines.liftRec(R.splitEvery);
	var splitWhen = /*#__PURE__*/kefir_combines.liftRec(R.splitWhen);
	var startsWith = /*#__PURE__*/kefir_combines.liftRec(R.startsWith);
	var subtract = /*#__PURE__*/kefir_combines.liftRec(R.subtract);
	var sum = /*#__PURE__*/kefir_combines.liftRec(R.sum);
	var symmetricDifference = /*#__PURE__*/kefir_combines.liftRec(R.symmetricDifference);
	var symmetricDifferenceWith = /*#__PURE__*/kefir_combines.liftRec(R.symmetricDifferenceWith);
	var tail = /*#__PURE__*/kefir_combines.liftRec(R.tail);
	var take = /*#__PURE__*/kefir_combines.liftRec(R.take);
	var takeLast = /*#__PURE__*/kefir_combines.liftRec(R.takeLast);
	var takeLastWhile = /*#__PURE__*/kefir_combines.liftRec(R.takeLastWhile);
	var takeWhile = /*#__PURE__*/kefir_combines.liftRec(R.takeWhile);
	var tap = /*#__PURE__*/kefir_combines.liftRec(R.tap);
	var test = /*#__PURE__*/kefir_combines.liftRec(R.test);
	var times = /*#__PURE__*/kefir_combines.liftRec(R.times);
	var toLower = /*#__PURE__*/kefir_combines.liftRec(R.toLower);
	var toPairs = /*#__PURE__*/kefir_combines.liftRec(R.toPairs);
	var toPairsIn = /*#__PURE__*/kefir_combines.liftRec(R.toPairsIn);
	var toString = /*#__PURE__*/kefir_combines.liftRec(R.toString);
	var toUpper = /*#__PURE__*/kefir_combines.liftRec(R.toUpper);
	var transduce = /*#__PURE__*/kefir_combines.liftRec(R.transduce);
	var transpose = /*#__PURE__*/kefir_combines.liftRec(R.transpose);
	var traverse = /*#__PURE__*/kefir_combines.liftRec(R.traverse);
	var trim = /*#__PURE__*/kefir_combines.liftRec(R.trim);
	var tryCatch = /*#__PURE__*/kefir_combines.liftRec(R.tryCatch);
	var type = /*#__PURE__*/kefir_combines.liftRec(R.type);
	var unapply = /*#__PURE__*/kefir_combines.liftRec(R.unapply);
	var unary = /*#__PURE__*/kefir_combines.liftRec(R.unary);
	var uncurryN = /*#__PURE__*/kefir_combines.liftRec(R.uncurryN);
	var unfold = /*#__PURE__*/kefir_combines.liftRec(R.unfold);
	var union = /*#__PURE__*/kefir_combines.liftRec(R.union);
	var unionWith = /*#__PURE__*/kefir_combines.liftRec(R.unionWith);
	var uniq = /*#__PURE__*/kefir_combines.liftRec(R.uniq);
	var uniqBy = /*#__PURE__*/kefir_combines.liftRec(R.uniqBy);
	var uniqWith = /*#__PURE__*/kefir_combines.liftRec(R.uniqWith);
	var unless = /*#__PURE__*/kefir_combines.liftRec(R.unless);
	var unnest = /*#__PURE__*/kefir_combines.liftRec(R.unnest);
	var until = /*#__PURE__*/kefir_combines.liftRec(R.until);
	var update = /*#__PURE__*/kefir_combines.liftRec(R.update);
	var useWith = /*#__PURE__*/kefir_combines.liftRec(R.useWith);
	var values = /*#__PURE__*/kefir_combines.liftRec(R.values);
	var valuesIn = /*#__PURE__*/kefir_combines.liftRec(R.valuesIn);
	var view = /*#__PURE__*/kefir_combines.liftRec(R.view);
	var when = /*#__PURE__*/kefir_combines.liftRec(R.when);
	var where = /*#__PURE__*/kefir_combines.liftRec(R.where);
	var whereEq = /*#__PURE__*/kefir_combines.liftRec(R.whereEq);
	var without = /*#__PURE__*/kefir_combines.liftRec(R.without);
	var xprod = /*#__PURE__*/kefir_combines.liftRec(R.xprod);
	var zip = /*#__PURE__*/kefir_combines.liftRec(R.zip);
	var zipObj = /*#__PURE__*/kefir_combines.liftRec(R.zipObj);
	var zipWith = /*#__PURE__*/kefir_combines.liftRec(R.zipWith);

	exports.F = F;
	exports.T = T;
	exports.__ = __;
	exports.add = add;
	exports.addIndex = addIndex;
	exports.adjust = adjust;
	exports.all = all;
	exports.allPass = allPass;
	exports.always = always;
	exports.and = and;
	exports.any = any;
	exports.anyPass = anyPass;
	exports.ap = ap;
	exports.aperture = aperture;
	exports.append = append;
	exports.apply = apply;
	exports.applySpec = applySpec;
	exports.applyTo = applyTo;
	exports.ascend = ascend;
	exports.assoc = assoc;
	exports.assocPath = assocPath;
	exports.binary = binary;
	exports.bind = bind;
	exports.both = both;
	exports.call = call;
	exports.chain = chain;
	exports.clamp = clamp;
	exports.clone = clone;
	exports.comparator = comparator;
	exports.complement = complement;
	exports.compose = compose;
	exports.composeK = composeK;
	exports.composeP = composeP;
	exports.concat = concat;
	exports.cond = cond;
	exports.construct = construct;
	exports.constructN = constructN;
	exports.contains = contains;
	exports.converge = converge;
	exports.countBy = countBy;
	exports.curry = curry;
	exports.curryN = curryN;
	exports.dec = dec;
	exports.defaultTo = defaultTo;
	exports.descend = descend;
	exports.difference = difference;
	exports.differenceWith = differenceWith;
	exports.dissoc = dissoc;
	exports.dissocPath = dissocPath;
	exports.divide = divide;
	exports.drop = drop;
	exports.dropLast = dropLast;
	exports.dropLastWhile = dropLastWhile;
	exports.dropRepeats = dropRepeats;
	exports.dropRepeatsWith = dropRepeatsWith;
	exports.dropWhile = dropWhile;
	exports.either = either;
	exports.empty = empty;
	exports.endsWith = endsWith;
	exports.eqBy = eqBy;
	exports.eqProps = eqProps;
	exports.equals = equals;
	exports.evolve = evolve;
	exports.filter = filter;
	exports.find = find;
	exports.findIndex = findIndex;
	exports.findLast = findLast;
	exports.findLastIndex = findLastIndex;
	exports.flatten = flatten;
	exports.flip = flip;
	exports.forEach = forEach;
	exports.forEachObjIndexed = forEachObjIndexed;
	exports.fromPairs = fromPairs;
	exports.groupBy = groupBy;
	exports.groupWith = groupWith;
	exports.gt = gt;
	exports.gte = gte;
	exports.has = has;
	exports.hasIn = hasIn;
	exports.head = head;
	exports.identical = identical;
	exports.identity = identity;
	exports.ifElse = ifElse;
	exports.inc = inc;
	exports.indexBy = indexBy;
	exports.indexOf = indexOf;
	exports.init = init;
	exports.innerJoin = innerJoin;
	exports.insert = insert;
	exports.insertAll = insertAll;
	exports.intersection = intersection;
	exports.intersperse = intersperse;
	exports.into = into;
	exports.invert = invert;
	exports.invertObj = invertObj;
	exports.invoker = invoker;
	exports.is = is;
	exports.isEmpty = isEmpty;
	exports.isNil = isNil;
	exports.join = join;
	exports.juxt = juxt;
	exports.keys = keys;
	exports.keysIn = keysIn;
	exports.last = last;
	exports.lastIndexOf = lastIndexOf;
	exports.length = length;
	exports.lens = lens;
	exports.lensIndex = lensIndex;
	exports.lensPath = lensPath;
	exports.lensProp = lensProp;
	exports.lift = lift;
	exports.liftN = liftN;
	exports.lt = lt;
	exports.lte = lte;
	exports.map = map;
	exports.mapAccum = mapAccum;
	exports.mapAccumRight = mapAccumRight;
	exports.mapObjIndexed = mapObjIndexed;
	exports.match = match;
	exports.mathMod = mathMod;
	exports.max = max;
	exports.maxBy = maxBy;
	exports.mean = mean;
	exports.median = median;
	exports.memoize = memoize;
	exports.memoizeWith = memoizeWith;
	exports.merge = merge;
	exports.mergeAll = mergeAll;
	exports.mergeDeepLeft = mergeDeepLeft;
	exports.mergeDeepRight = mergeDeepRight;
	exports.mergeDeepWith = mergeDeepWith;
	exports.mergeDeepWithKey = mergeDeepWithKey;
	exports.mergeWith = mergeWith;
	exports.mergeWithKey = mergeWithKey;
	exports.min = min;
	exports.minBy = minBy;
	exports.modulo = modulo;
	exports.multiply = multiply;
	exports.nAry = nAry;
	exports.negate = negate;
	exports.none = none;
	exports.not = not;
	exports.nth = nth;
	exports.nthArg = nthArg;
	exports.o = o;
	exports.objOf = objOf;
	exports.of = of;
	exports.omit = omit;
	exports.once = once;
	exports.or = or;
	exports.over = over;
	exports.pair = pair;
	exports.partial = partial;
	exports.partialRight = partialRight;
	exports.partition = partition;
	exports.path = path;
	exports.pathEq = pathEq;
	exports.pathOr = pathOr;
	exports.pathSatisfies = pathSatisfies;
	exports.pick = pick;
	exports.pickAll = pickAll;
	exports.pickBy = pickBy;
	exports.pipe = pipe;
	exports.pipeK = pipeK;
	exports.pipeP = pipeP;
	exports.pluck = pluck;
	exports.prepend = prepend;
	exports.product = product;
	exports.project = project;
	exports.prop = prop;
	exports.propEq = propEq;
	exports.propIs = propIs;
	exports.propOr = propOr;
	exports.propSatisfies = propSatisfies;
	exports.props = props;
	exports.range = range;
	exports.reduce = reduce;
	exports.reduceBy = reduceBy;
	exports.reduceRight = reduceRight;
	exports.reduceWhile = reduceWhile;
	exports.reduced = reduced;
	exports.reject = reject;
	exports.remove = remove;
	exports.repeat = repeat;
	exports.replace = replace;
	exports.reverse = reverse;
	exports.scan = scan;
	exports.sequence = sequence;
	exports.set = set;
	exports.slice = slice;
	exports.sort = sort;
	exports.sortBy = sortBy;
	exports.sortWith = sortWith;
	exports.split = split;
	exports.splitAt = splitAt;
	exports.splitEvery = splitEvery;
	exports.splitWhen = splitWhen;
	exports.startsWith = startsWith;
	exports.subtract = subtract;
	exports.sum = sum;
	exports.symmetricDifference = symmetricDifference;
	exports.symmetricDifferenceWith = symmetricDifferenceWith;
	exports.tail = tail;
	exports.take = take;
	exports.takeLast = takeLast;
	exports.takeLastWhile = takeLastWhile;
	exports.takeWhile = takeWhile;
	exports.tap = tap;
	exports.test = test;
	exports.times = times;
	exports.toLower = toLower;
	exports.toPairs = toPairs;
	exports.toPairsIn = toPairsIn;
	exports.toString = toString;
	exports.toUpper = toUpper;
	exports.transduce = transduce;
	exports.transpose = transpose;
	exports.traverse = traverse;
	exports.trim = trim;
	exports.tryCatch = tryCatch;
	exports.type = type;
	exports.unapply = unapply;
	exports.unary = unary;
	exports.uncurryN = uncurryN;
	exports.unfold = unfold;
	exports.union = union;
	exports.unionWith = unionWith;
	exports.uniq = uniq;
	exports.uniqBy = uniqBy;
	exports.uniqWith = uniqWith;
	exports.unless = unless;
	exports.unnest = unnest;
	exports.until = until;
	exports.update = update;
	exports.useWith = useWith;
	exports.values = values;
	exports.valuesIn = valuesIn;
	exports.view = view;
	exports.when = when;
	exports.where = where;
	exports.whereEq = whereEq;
	exports.without = without;
	exports.xprod = xprod;
	exports.zip = zip;
	exports.zipObj = zipObj;
	exports.zipWith = zipWith;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
