import { F, T, __, add, addIndex, adjust, all, allPass, always, and, any, anyPass, ap, aperture, append, apply, applySpec, applyTo, ascend, assoc, assocPath, binary, bind, both, call, chain, clamp, clone, comparator, complement, compose, composeK, composeP, concat, cond, construct, constructN, contains, converge, countBy, curry, curryN, dec, defaultTo, descend, difference, differenceWith, dissoc, dissocPath, divide, drop, dropLast, dropLastWhile, dropRepeats, dropRepeatsWith, dropWhile, either, empty, endsWith, eqBy, eqProps, equals, evolve, filter, find, findIndex, findLast, findLastIndex, flatten, flip, forEach, forEachObjIndexed, fromPairs, groupBy, groupWith, gt, gte, has, hasIn, head, identical, identity, ifElse, inc, indexBy, indexOf, init, innerJoin, insert, insertAll, intersection, intersperse, into, invert, invertObj, invoker, is, isEmpty, isNil, join, juxt, keys, keysIn, last, lastIndexOf, length, lens, lensIndex, lensPath, lensProp, lift, liftN, lt, lte, map, mapAccum, mapAccumRight, mapObjIndexed, match, mathMod, max, maxBy, mean, median, memoize, memoizeWith, merge, mergeAll, mergeDeepLeft, mergeDeepRight, mergeDeepWith, mergeDeepWithKey, mergeWith, mergeWithKey, min, minBy, modulo, multiply, nAry, negate, none, not, nth, nthArg, o, objOf, of, omit, once, or, over, pair, partial, partialRight, partition, path, pathEq, pathOr, pathSatisfies, pick, pickAll, pickBy, pipe, pipeK, pipeP, pluck, prepend, product, project, prop, propEq, propIs, propOr, propSatisfies, props, range, reduce, reduceBy, reduceRight, reduceWhile, reduced, reject, remove, repeat, replace, reverse, scan, sequence, set, slice, sort, sortBy, sortWith, split, splitAt, splitEvery, splitWhen, startsWith, subtract, sum, symmetricDifference, symmetricDifferenceWith, tail, take, takeLast, takeLastWhile, takeWhile, tap, test, times, toLower, toPairs, toPairsIn, toString, toUpper, transduce, transpose, traverse, trim, tryCatch, type, unapply, unary, uncurryN, unfold, union, unionWith, uniq, uniqBy, uniqWith, unless, unnest, until, update, useWith, values, valuesIn, view, when, where, whereEq, without, xprod, zip, zipObj, zipWith } from 'ramda';
import { Observable } from 'kefir';
import { combines } from 'kefir.combines';

function arityOf(g, f) {
  switch (g.length) {
    case 0:
      return f;
    case 1:
      return function (_1) {
        return f.apply(null, arguments);
      };
    case 2:
      return function (_1, _2) {
        return f.apply(null, arguments);
      };
    case 3:
      return function (_1, _2, _3) {
        return f.apply(null, arguments);
      };
    case 4:
      return function (_1, _2, _3, _4) {
        return f.apply(null, arguments);
      };
  }
  throw Error('Unsupported arity for ' + g);
}

function liftR(f) {
  if (typeof f !== 'function') {
    if (f instanceof Observable) {
      return combines(f, liftR);
    } else {
      return f;
    }
  } else {
    return arityOf(f, function () {
      var n = arguments.length;
      var xs = Array(n + 1);
      for (var i = 0; i < n; ++i) {
        xs[i] = arguments[i];
      }xs[n] = f;
      return liftR(combines.apply(null, xs));
    });
  }
}

var F$1 = /*#__PURE__*/liftR(F);
var T$1 = /*#__PURE__*/liftR(T);
var __$1 = /*#__PURE__*/liftR(__);
var add$1 = /*#__PURE__*/liftR(add);
var addIndex$1 = /*#__PURE__*/liftR(addIndex);
var adjust$1 = /*#__PURE__*/liftR(adjust);
var all$1 = /*#__PURE__*/liftR(all);
var allPass$1 = /*#__PURE__*/liftR(allPass);
var always$1 = /*#__PURE__*/liftR(always);
var and$1 = /*#__PURE__*/liftR(and);
var any$1 = /*#__PURE__*/liftR(any);
var anyPass$1 = /*#__PURE__*/liftR(anyPass);
var ap$1 = /*#__PURE__*/liftR(ap);
var aperture$1 = /*#__PURE__*/liftR(aperture);
var append$1 = /*#__PURE__*/liftR(append);
var apply$1 = /*#__PURE__*/liftR(apply);
var applySpec$1 = /*#__PURE__*/liftR(applySpec);
var applyTo$1 = /*#__PURE__*/liftR(applyTo);
var ascend$1 = /*#__PURE__*/liftR(ascend);
var assoc$1 = /*#__PURE__*/liftR(assoc);
var assocPath$1 = /*#__PURE__*/liftR(assocPath);
var binary$1 = /*#__PURE__*/liftR(binary);
var bind$1 = /*#__PURE__*/liftR(bind);
var both$1 = /*#__PURE__*/liftR(both);
var call$1 = /*#__PURE__*/liftR(call);
var chain$1 = /*#__PURE__*/liftR(chain);
var clamp$1 = /*#__PURE__*/liftR(clamp);
var clone$1 = /*#__PURE__*/liftR(clone);
var comparator$1 = /*#__PURE__*/liftR(comparator);
var complement$1 = /*#__PURE__*/liftR(complement);
var compose$1 = /*#__PURE__*/liftR(compose);
var composeK$1 = /*#__PURE__*/liftR(composeK);
var composeP$1 = /*#__PURE__*/liftR(composeP);
var concat$1 = /*#__PURE__*/liftR(concat);
var cond$1 = /*#__PURE__*/liftR(cond);
var construct$1 = /*#__PURE__*/liftR(construct);
var constructN$1 = /*#__PURE__*/liftR(constructN);
var contains$1 = /*#__PURE__*/liftR(contains);
var converge$1 = /*#__PURE__*/liftR(converge);
var countBy$1 = /*#__PURE__*/liftR(countBy);
var curry$1 = /*#__PURE__*/liftR(curry);
var curryN$1 = /*#__PURE__*/liftR(curryN);
var dec$1 = /*#__PURE__*/liftR(dec);
var defaultTo$1 = /*#__PURE__*/liftR(defaultTo);
var descend$1 = /*#__PURE__*/liftR(descend);
var difference$1 = /*#__PURE__*/liftR(difference);
var differenceWith$1 = /*#__PURE__*/liftR(differenceWith);
var dissoc$1 = /*#__PURE__*/liftR(dissoc);
var dissocPath$1 = /*#__PURE__*/liftR(dissocPath);
var divide$1 = /*#__PURE__*/liftR(divide);
var drop$1 = /*#__PURE__*/liftR(drop);
var dropLast$1 = /*#__PURE__*/liftR(dropLast);
var dropLastWhile$1 = /*#__PURE__*/liftR(dropLastWhile);
var dropRepeats$1 = /*#__PURE__*/liftR(dropRepeats);
var dropRepeatsWith$1 = /*#__PURE__*/liftR(dropRepeatsWith);
var dropWhile$1 = /*#__PURE__*/liftR(dropWhile);
var either$1 = /*#__PURE__*/liftR(either);
var empty$1 = /*#__PURE__*/liftR(empty);
var endsWith$1 = /*#__PURE__*/liftR(endsWith);
var eqBy$1 = /*#__PURE__*/liftR(eqBy);
var eqProps$1 = /*#__PURE__*/liftR(eqProps);
var equals$1 = /*#__PURE__*/liftR(equals);
var evolve$1 = /*#__PURE__*/liftR(evolve);
var filter$1 = /*#__PURE__*/liftR(filter);
var find$1 = /*#__PURE__*/liftR(find);
var findIndex$1 = /*#__PURE__*/liftR(findIndex);
var findLast$1 = /*#__PURE__*/liftR(findLast);
var findLastIndex$1 = /*#__PURE__*/liftR(findLastIndex);
var flatten$1 = /*#__PURE__*/liftR(flatten);
var flip$1 = /*#__PURE__*/liftR(flip);
var forEach$1 = /*#__PURE__*/liftR(forEach);
var forEachObjIndexed$1 = /*#__PURE__*/liftR(forEachObjIndexed);
var fromPairs$1 = /*#__PURE__*/liftR(fromPairs);
var groupBy$1 = /*#__PURE__*/liftR(groupBy);
var groupWith$1 = /*#__PURE__*/liftR(groupWith);
var gt$1 = /*#__PURE__*/liftR(gt);
var gte$1 = /*#__PURE__*/liftR(gte);
var has$1 = /*#__PURE__*/liftR(has);
var hasIn$1 = /*#__PURE__*/liftR(hasIn);
var head$1 = /*#__PURE__*/liftR(head);
var identical$1 = /*#__PURE__*/liftR(identical);
var identity$1 = /*#__PURE__*/liftR(identity);
var ifElse$1 = /*#__PURE__*/liftR(ifElse);
var inc$1 = /*#__PURE__*/liftR(inc);
var indexBy$1 = /*#__PURE__*/liftR(indexBy);
var indexOf$1 = /*#__PURE__*/liftR(indexOf);
var init$1 = /*#__PURE__*/liftR(init);
var innerJoin$1 = /*#__PURE__*/liftR(innerJoin);
var insert$1 = /*#__PURE__*/liftR(insert);
var insertAll$1 = /*#__PURE__*/liftR(insertAll);
var intersection$1 = /*#__PURE__*/liftR(intersection);
var intersperse$1 = /*#__PURE__*/liftR(intersperse);
var into$1 = /*#__PURE__*/liftR(into);
var invert$1 = /*#__PURE__*/liftR(invert);
var invertObj$1 = /*#__PURE__*/liftR(invertObj);
var invoker$1 = /*#__PURE__*/liftR(invoker);
var is$1 = /*#__PURE__*/liftR(is);
var isEmpty$1 = /*#__PURE__*/liftR(isEmpty);
var isNil$1 = /*#__PURE__*/liftR(isNil);
var join$1 = /*#__PURE__*/liftR(join);
var juxt$1 = /*#__PURE__*/liftR(juxt);
var keys$1 = /*#__PURE__*/liftR(keys);
var keysIn$1 = /*#__PURE__*/liftR(keysIn);
var last$1 = /*#__PURE__*/liftR(last);
var lastIndexOf$1 = /*#__PURE__*/liftR(lastIndexOf);
var length$1 = /*#__PURE__*/liftR(length);
var lens$1 = /*#__PURE__*/liftR(lens);
var lensIndex$1 = /*#__PURE__*/liftR(lensIndex);
var lensPath$1 = /*#__PURE__*/liftR(lensPath);
var lensProp$1 = /*#__PURE__*/liftR(lensProp);
var lift$1 = /*#__PURE__*/liftR(lift);
var liftN$1 = /*#__PURE__*/liftR(liftN);
var lt$1 = /*#__PURE__*/liftR(lt);
var lte$1 = /*#__PURE__*/liftR(lte);
var map$1 = /*#__PURE__*/liftR(map);
var mapAccum$1 = /*#__PURE__*/liftR(mapAccum);
var mapAccumRight$1 = /*#__PURE__*/liftR(mapAccumRight);
var mapObjIndexed$1 = /*#__PURE__*/liftR(mapObjIndexed);
var match$1 = /*#__PURE__*/liftR(match);
var mathMod$1 = /*#__PURE__*/liftR(mathMod);
var max$1 = /*#__PURE__*/liftR(max);
var maxBy$1 = /*#__PURE__*/liftR(maxBy);
var mean$1 = /*#__PURE__*/liftR(mean);
var median$1 = /*#__PURE__*/liftR(median);
var memoize$1 = /*#__PURE__*/liftR(memoize);
var memoizeWith$1 = /*#__PURE__*/liftR(memoizeWith);
var merge$1 = /*#__PURE__*/liftR(merge);
var mergeAll$1 = /*#__PURE__*/liftR(mergeAll);
var mergeDeepLeft$1 = /*#__PURE__*/liftR(mergeDeepLeft);
var mergeDeepRight$1 = /*#__PURE__*/liftR(mergeDeepRight);
var mergeDeepWith$1 = /*#__PURE__*/liftR(mergeDeepWith);
var mergeDeepWithKey$1 = /*#__PURE__*/liftR(mergeDeepWithKey);
var mergeWith$1 = /*#__PURE__*/liftR(mergeWith);
var mergeWithKey$1 = /*#__PURE__*/liftR(mergeWithKey);
var min$1 = /*#__PURE__*/liftR(min);
var minBy$1 = /*#__PURE__*/liftR(minBy);
var modulo$1 = /*#__PURE__*/liftR(modulo);
var multiply$1 = /*#__PURE__*/liftR(multiply);
var nAry$1 = /*#__PURE__*/liftR(nAry);
var negate$1 = /*#__PURE__*/liftR(negate);
var none$1 = /*#__PURE__*/liftR(none);
var not$1 = /*#__PURE__*/liftR(not);
var nth$1 = /*#__PURE__*/liftR(nth);
var nthArg$1 = /*#__PURE__*/liftR(nthArg);
var o$1 = /*#__PURE__*/liftR(o);
var objOf$1 = /*#__PURE__*/liftR(objOf);
var of$1 = /*#__PURE__*/liftR(of);
var omit$1 = /*#__PURE__*/liftR(omit);
var once$1 = /*#__PURE__*/liftR(once);
var or$1 = /*#__PURE__*/liftR(or);
var over$1 = /*#__PURE__*/liftR(over);
var pair$1 = /*#__PURE__*/liftR(pair);
var partial$1 = /*#__PURE__*/liftR(partial);
var partialRight$1 = /*#__PURE__*/liftR(partialRight);
var partition$1 = /*#__PURE__*/liftR(partition);
var path$1 = /*#__PURE__*/liftR(path);
var pathEq$1 = /*#__PURE__*/liftR(pathEq);
var pathOr$1 = /*#__PURE__*/liftR(pathOr);
var pathSatisfies$1 = /*#__PURE__*/liftR(pathSatisfies);
var pick$1 = /*#__PURE__*/liftR(pick);
var pickAll$1 = /*#__PURE__*/liftR(pickAll);
var pickBy$1 = /*#__PURE__*/liftR(pickBy);
var pipe$1 = /*#__PURE__*/liftR(pipe);
var pipeK$1 = /*#__PURE__*/liftR(pipeK);
var pipeP$1 = /*#__PURE__*/liftR(pipeP);
var pluck$1 = /*#__PURE__*/liftR(pluck);
var prepend$1 = /*#__PURE__*/liftR(prepend);
var product$1 = /*#__PURE__*/liftR(product);
var project$1 = /*#__PURE__*/liftR(project);
var prop$1 = /*#__PURE__*/liftR(prop);
var propEq$1 = /*#__PURE__*/liftR(propEq);
var propIs$1 = /*#__PURE__*/liftR(propIs);
var propOr$1 = /*#__PURE__*/liftR(propOr);
var propSatisfies$1 = /*#__PURE__*/liftR(propSatisfies);
var props$1 = /*#__PURE__*/liftR(props);
var range$1 = /*#__PURE__*/liftR(range);
var reduce$1 = /*#__PURE__*/liftR(reduce);
var reduceBy$1 = /*#__PURE__*/liftR(reduceBy);
var reduceRight$1 = /*#__PURE__*/liftR(reduceRight);
var reduceWhile$1 = /*#__PURE__*/liftR(reduceWhile);
var reduced$1 = /*#__PURE__*/liftR(reduced);
var reject$1 = /*#__PURE__*/liftR(reject);
var remove$1 = /*#__PURE__*/liftR(remove);
var repeat$1 = /*#__PURE__*/liftR(repeat);
var replace$1 = /*#__PURE__*/liftR(replace);
var reverse$1 = /*#__PURE__*/liftR(reverse);
var scan$1 = /*#__PURE__*/liftR(scan);
var sequence$1 = /*#__PURE__*/liftR(sequence);
var set$1 = /*#__PURE__*/liftR(set);
var slice$1 = /*#__PURE__*/liftR(slice);
var sort$1 = /*#__PURE__*/liftR(sort);
var sortBy$1 = /*#__PURE__*/liftR(sortBy);
var sortWith$1 = /*#__PURE__*/liftR(sortWith);
var split$1 = /*#__PURE__*/liftR(split);
var splitAt$1 = /*#__PURE__*/liftR(splitAt);
var splitEvery$1 = /*#__PURE__*/liftR(splitEvery);
var splitWhen$1 = /*#__PURE__*/liftR(splitWhen);
var startsWith$1 = /*#__PURE__*/liftR(startsWith);
var subtract$1 = /*#__PURE__*/liftR(subtract);
var sum$1 = /*#__PURE__*/liftR(sum);
var symmetricDifference$1 = /*#__PURE__*/liftR(symmetricDifference);
var symmetricDifferenceWith$1 = /*#__PURE__*/liftR(symmetricDifferenceWith);
var tail$1 = /*#__PURE__*/liftR(tail);
var take$1 = /*#__PURE__*/liftR(take);
var takeLast$1 = /*#__PURE__*/liftR(takeLast);
var takeLastWhile$1 = /*#__PURE__*/liftR(takeLastWhile);
var takeWhile$1 = /*#__PURE__*/liftR(takeWhile);
var tap$1 = /*#__PURE__*/liftR(tap);
var test$1 = /*#__PURE__*/liftR(test);
var times$1 = /*#__PURE__*/liftR(times);
var toLower$1 = /*#__PURE__*/liftR(toLower);
var toPairs$1 = /*#__PURE__*/liftR(toPairs);
var toPairsIn$1 = /*#__PURE__*/liftR(toPairsIn);
var toString$1 = /*#__PURE__*/liftR(toString);
var toUpper$1 = /*#__PURE__*/liftR(toUpper);
var transduce$1 = /*#__PURE__*/liftR(transduce);
var transpose$1 = /*#__PURE__*/liftR(transpose);
var traverse$1 = /*#__PURE__*/liftR(traverse);
var trim$1 = /*#__PURE__*/liftR(trim);
var tryCatch$1 = /*#__PURE__*/liftR(tryCatch);
var type$1 = /*#__PURE__*/liftR(type);
var unapply$1 = /*#__PURE__*/liftR(unapply);
var unary$1 = /*#__PURE__*/liftR(unary);
var uncurryN$1 = /*#__PURE__*/liftR(uncurryN);
var unfold$1 = /*#__PURE__*/liftR(unfold);
var union$1 = /*#__PURE__*/liftR(union);
var unionWith$1 = /*#__PURE__*/liftR(unionWith);
var uniq$1 = /*#__PURE__*/liftR(uniq);
var uniqBy$1 = /*#__PURE__*/liftR(uniqBy);
var uniqWith$1 = /*#__PURE__*/liftR(uniqWith);
var unless$1 = /*#__PURE__*/liftR(unless);
var unnest$1 = /*#__PURE__*/liftR(unnest);
var until$1 = /*#__PURE__*/liftR(until);
var update$1 = /*#__PURE__*/liftR(update);
var useWith$1 = /*#__PURE__*/liftR(useWith);
var values$1 = /*#__PURE__*/liftR(values);
var valuesIn$1 = /*#__PURE__*/liftR(valuesIn);
var view$1 = /*#__PURE__*/liftR(view);
var when$1 = /*#__PURE__*/liftR(when);
var where$1 = /*#__PURE__*/liftR(where);
var whereEq$1 = /*#__PURE__*/liftR(whereEq);
var without$1 = /*#__PURE__*/liftR(without);
var xprod$1 = /*#__PURE__*/liftR(xprod);
var zip$1 = /*#__PURE__*/liftR(zip);
var zipObj$1 = /*#__PURE__*/liftR(zipObj);
var zipWith$1 = /*#__PURE__*/liftR(zipWith);

export { F$1 as F, T$1 as T, __$1 as __, add$1 as add, addIndex$1 as addIndex, adjust$1 as adjust, all$1 as all, allPass$1 as allPass, always$1 as always, and$1 as and, any$1 as any, anyPass$1 as anyPass, ap$1 as ap, aperture$1 as aperture, append$1 as append, apply$1 as apply, applySpec$1 as applySpec, applyTo$1 as applyTo, ascend$1 as ascend, assoc$1 as assoc, assocPath$1 as assocPath, binary$1 as binary, bind$1 as bind, both$1 as both, call$1 as call, chain$1 as chain, clamp$1 as clamp, clone$1 as clone, comparator$1 as comparator, complement$1 as complement, compose$1 as compose, composeK$1 as composeK, composeP$1 as composeP, concat$1 as concat, cond$1 as cond, construct$1 as construct, constructN$1 as constructN, contains$1 as contains, converge$1 as converge, countBy$1 as countBy, curry$1 as curry, curryN$1 as curryN, dec$1 as dec, defaultTo$1 as defaultTo, descend$1 as descend, difference$1 as difference, differenceWith$1 as differenceWith, dissoc$1 as dissoc, dissocPath$1 as dissocPath, divide$1 as divide, drop$1 as drop, dropLast$1 as dropLast, dropLastWhile$1 as dropLastWhile, dropRepeats$1 as dropRepeats, dropRepeatsWith$1 as dropRepeatsWith, dropWhile$1 as dropWhile, either$1 as either, empty$1 as empty, endsWith$1 as endsWith, eqBy$1 as eqBy, eqProps$1 as eqProps, equals$1 as equals, evolve$1 as evolve, filter$1 as filter, find$1 as find, findIndex$1 as findIndex, findLast$1 as findLast, findLastIndex$1 as findLastIndex, flatten$1 as flatten, flip$1 as flip, forEach$1 as forEach, forEachObjIndexed$1 as forEachObjIndexed, fromPairs$1 as fromPairs, groupBy$1 as groupBy, groupWith$1 as groupWith, gt$1 as gt, gte$1 as gte, has$1 as has, hasIn$1 as hasIn, head$1 as head, identical$1 as identical, identity$1 as identity, ifElse$1 as ifElse, inc$1 as inc, indexBy$1 as indexBy, indexOf$1 as indexOf, init$1 as init, innerJoin$1 as innerJoin, insert$1 as insert, insertAll$1 as insertAll, intersection$1 as intersection, intersperse$1 as intersperse, into$1 as into, invert$1 as invert, invertObj$1 as invertObj, invoker$1 as invoker, is$1 as is, isEmpty$1 as isEmpty, isNil$1 as isNil, join$1 as join, juxt$1 as juxt, keys$1 as keys, keysIn$1 as keysIn, last$1 as last, lastIndexOf$1 as lastIndexOf, length$1 as length, lens$1 as lens, lensIndex$1 as lensIndex, lensPath$1 as lensPath, lensProp$1 as lensProp, lift$1 as lift, liftN$1 as liftN, lt$1 as lt, lte$1 as lte, map$1 as map, mapAccum$1 as mapAccum, mapAccumRight$1 as mapAccumRight, mapObjIndexed$1 as mapObjIndexed, match$1 as match, mathMod$1 as mathMod, max$1 as max, maxBy$1 as maxBy, mean$1 as mean, median$1 as median, memoize$1 as memoize, memoizeWith$1 as memoizeWith, merge$1 as merge, mergeAll$1 as mergeAll, mergeDeepLeft$1 as mergeDeepLeft, mergeDeepRight$1 as mergeDeepRight, mergeDeepWith$1 as mergeDeepWith, mergeDeepWithKey$1 as mergeDeepWithKey, mergeWith$1 as mergeWith, mergeWithKey$1 as mergeWithKey, min$1 as min, minBy$1 as minBy, modulo$1 as modulo, multiply$1 as multiply, nAry$1 as nAry, negate$1 as negate, none$1 as none, not$1 as not, nth$1 as nth, nthArg$1 as nthArg, o$1 as o, objOf$1 as objOf, of$1 as of, omit$1 as omit, once$1 as once, or$1 as or, over$1 as over, pair$1 as pair, partial$1 as partial, partialRight$1 as partialRight, partition$1 as partition, path$1 as path, pathEq$1 as pathEq, pathOr$1 as pathOr, pathSatisfies$1 as pathSatisfies, pick$1 as pick, pickAll$1 as pickAll, pickBy$1 as pickBy, pipe$1 as pipe, pipeK$1 as pipeK, pipeP$1 as pipeP, pluck$1 as pluck, prepend$1 as prepend, product$1 as product, project$1 as project, prop$1 as prop, propEq$1 as propEq, propIs$1 as propIs, propOr$1 as propOr, propSatisfies$1 as propSatisfies, props$1 as props, range$1 as range, reduce$1 as reduce, reduceBy$1 as reduceBy, reduceRight$1 as reduceRight, reduceWhile$1 as reduceWhile, reduced$1 as reduced, reject$1 as reject, remove$1 as remove, repeat$1 as repeat, replace$1 as replace, reverse$1 as reverse, scan$1 as scan, sequence$1 as sequence, set$1 as set, slice$1 as slice, sort$1 as sort, sortBy$1 as sortBy, sortWith$1 as sortWith, split$1 as split, splitAt$1 as splitAt, splitEvery$1 as splitEvery, splitWhen$1 as splitWhen, startsWith$1 as startsWith, subtract$1 as subtract, sum$1 as sum, symmetricDifference$1 as symmetricDifference, symmetricDifferenceWith$1 as symmetricDifferenceWith, tail$1 as tail, take$1 as take, takeLast$1 as takeLast, takeLastWhile$1 as takeLastWhile, takeWhile$1 as takeWhile, tap$1 as tap, test$1 as test, times$1 as times, toLower$1 as toLower, toPairs$1 as toPairs, toPairsIn$1 as toPairsIn, toString$1 as toString, toUpper$1 as toUpper, transduce$1 as transduce, transpose$1 as transpose, traverse$1 as traverse, trim$1 as trim, tryCatch$1 as tryCatch, type$1 as type, unapply$1 as unapply, unary$1 as unary, uncurryN$1 as uncurryN, unfold$1 as unfold, union$1 as union, unionWith$1 as unionWith, uniq$1 as uniq, uniqBy$1 as uniqBy, uniqWith$1 as uniqWith, unless$1 as unless, unnest$1 as unnest, until$1 as until, update$1 as update, useWith$1 as useWith, values$1 as values, valuesIn$1 as valuesIn, view$1 as view, when$1 as when, where$1 as where, whereEq$1 as whereEq, without$1 as without, xprod$1 as xprod, zip$1 as zip, zipObj$1 as zipObj, zipWith$1 as zipWith };
